#!/bin/bash
set -e

# ---------- CONFIG ----------
IMAGE_NAME="armboy/vps-first-app"
CONTAINER_NAME="vps-first-app"
DEFAULT_RUNTIME_DAYS=2  # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ container ‡∏£‡∏±‡∏ô
PORT=3000
# ----------------------------

# Function to convert days to seconds
days_to_seconds() {
  echo $(($1 * 86400))
}

# Function to show help
show_help() {
  echo "‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: $0 [options]"
  echo "‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å:"
  echo "  -e, --environment <dev|prod>  ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏° (dev ‡∏´‡∏£‡∏∑‡∏≠ prod) [‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: prod]"
  echo "  -d, --days <number>           ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ container ‡∏£‡∏±‡∏ô [‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: $DEFAULT_RUNTIME_DAYS]"
  echo "  -f, --forever                 ‡∏£‡∏±‡∏ô container ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≥‡∏´‡∏ô‡∏î"
  echo "  -t, --tag <tag>               ‡∏£‡∏∞‡∏ö‡∏∏ tag ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏∞‡πÉ‡∏ä‡πâ latest ‡∏´‡∏£‡∏∑‡∏≠ dev-latest)"
  echo "  -h, --help                    ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"
  exit 0
}

# Default values
ENVIRONMENT="prod"
RUNTIME_DAYS=$DEFAULT_RUNTIME_DAYS
FOREVER=false
CUSTOM_TAG=""

# Parse command line arguments
while [[ $# -gt 0 ]]; do
  case "$1" in
    -e|--environment)
      ENVIRONMENT="$2"
      shift 2
      ;;
    -d|--days)
      RUNTIME_DAYS="$2"
      shift 2
      ;;
    -f|--forever)
      FOREVER=true
      shift
      ;;
    -t|--tag)
      CUSTOM_TAG="$2"
      shift 2
      ;;
    -h|--help)
      show_help
      ;;
    *)
      echo "‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: $1"
      show_help
      ;;
  esac
done

# Get the appropriate tag based on environment and custom tag
if [ -n "$CUSTOM_TAG" ]; then
  TAG="$CUSTOM_TAG"
elif [ "$ENVIRONMENT" == "dev" ]; then
  TAG="dev-latest"
else
  TAG="latest"
fi

FULL_IMAGE_NAME="$IMAGE_NAME:$TAG"

# Print config
echo "üöÄ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏£‡∏±‡∏ô container:"
echo " - Image: $FULL_IMAGE_NAME"
echo " - Container name: $CONTAINER_NAME"
echo " - Port: $PORT"

if [ "$FOREVER" = true ]; then
  echo " - ‡∏à‡∏∞‡∏£‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≥‡∏´‡∏ô‡∏î"
else
  echo " - ‡∏à‡∏∞‡∏£‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ $RUNTIME_DAYS ‡∏ß‡∏±‡∏ô"
fi

# Check if container already exists and stop it
if docker ps -a --format '{{.Names}}' | grep -q "^$CONTAINER_NAME$"; then
  echo "üõë ‡∏û‡∏ö container ‡∏ä‡∏∑‡πà‡∏≠ $CONTAINER_NAME ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏´‡∏¢‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡∏•‡∏ö..."
  docker stop $CONTAINER_NAME || true
  docker rm $CONTAINER_NAME || true
fi

# Pull the latest image
echo "üì• ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á image ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î..."
docker pull $FULL_IMAGE_NAME

# Start the container
echo "üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô container..."
docker run -d \
  --name $CONTAINER_NAME \
  -p $PORT:$PORT \
  -e PORT=$PORT \
  --restart unless-stopped \
  $FULL_IMAGE_NAME

echo "‚úÖ Container ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß"
echo "üìä ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà http://localhost:$PORT"

# Set up timer if not running forever
if [ "$FOREVER" = false ]; then
  RUNTIME_SECONDS=$(days_to_seconds $RUNTIME_DAYS)
  
  echo "‚è±Ô∏è Container ‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ $RUNTIME_DAYS ‡∏ß‡∏±‡∏ô ($(printf "%'d" $RUNTIME_SECONDS) ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)"
  echo "‚è≥ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤... (‡∏Å‡∏î Ctrl+C ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏ï‡πà container ‡∏à‡∏∞‡∏¢‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ)"
  
  START_TIME=$(date +%s)
  END_TIME=$((START_TIME + RUNTIME_SECONDS))
  
  # Show running time and set up shutdown
  (
    trap "echo '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤ ‡πÅ‡∏ï‡πà container ‡∏¢‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà'" INT
    
    while true; do
      CURRENT_TIME=$(date +%s)
      ELAPSED=$((CURRENT_TIME - START_TIME))
      REMAINING=$((END_TIME - CURRENT_TIME))
      
      if [ $REMAINING -le 0 ]; then
        echo "‚åõ ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏´‡∏¢‡∏∏‡∏î container..."
        docker stop $CONTAINER_NAME
        echo "üõë Container ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß"
        break
      fi
      
      # Calculate days, hours, minutes, seconds
      ELAPSED_DAYS=$((ELAPSED / 86400))
      ELAPSED_HOURS=$(((ELAPSED % 86400) / 3600))
      ELAPSED_MINUTES=$(((ELAPSED % 3600) / 60))
      ELAPSED_SECONDS=$((ELAPSED % 60))
      
      REMAINING_DAYS=$((REMAINING / 86400))
      REMAINING_HOURS=$(((REMAINING % 86400) / 3600))
      REMAINING_MINUTES=$(((REMAINING % 3600) / 60))
      REMAINING_SECONDS=$((REMAINING % 60))
      
      # Clear line and show progress
      echo -ne "\r‚è±Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ: ${ELAPSED_DAYS}‡∏ß‡∏±‡∏ô ${ELAPSED_HOURS}‡∏ä‡∏°. ${ELAPSED_MINUTES}‡∏ô‡∏≤‡∏ó‡∏µ ${ELAPSED_SECONDS}‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ | ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏ß‡∏•‡∏≤: ${REMAINING_DAYS}‡∏ß‡∏±‡∏ô ${REMAINING_HOURS}‡∏ä‡∏°. ${REMAINING_MINUTES}‡∏ô‡∏≤‡∏ó‡∏µ ${REMAINING_SECONDS}‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ      "
      
      sleep 1
    done
  ) &
  
  echo ""
  echo "üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:"
  echo "- ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏∏‡∏î container ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: docker stop $CONTAINER_NAME"
  echo "- ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å: docker logs -f $CONTAINER_NAME"
else
  echo ""
  echo "üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:"
  echo "- Container ‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏´‡∏¢‡∏∏‡∏î‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á"
  echo "- ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏∏‡∏î container ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: docker stop $CONTAINER_NAME"
  echo "- ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å: docker logs -f $CONTAINER_NAME"
fi 