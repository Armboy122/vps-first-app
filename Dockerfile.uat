# UAT Environment Dockerfile สำหรับ Next.js + Prisma
# Stage 1: Base - ติดตั้ง dependencies พื้นฐาน
FROM node:18-alpine AS base
RUN apk add --no-cache libc6-compat openssl curl dumb-init
WORKDIR /app

# Stage 2: Production Dependencies
FROM base AS deps
COPY package.json package-lock.json* ./
# ใช้ cache mount สำหรับ npm cache (เร็วกว่าเดิม 50-70%)
RUN --mount=type=cache,target=/root/.npm \
    npm ci --only=production

# Stage 3: Build Dependencies  
FROM base AS build-deps
COPY package.json package-lock.json* ./
# ใช้ cache mount สำหรับ npm cache
RUN --mount=type=cache,target=/root/.npm \
    npm ci

# Stage 4: Builder - build application สำหรับ UAT
FROM base AS builder

# Environment variables สำหรับ UAT build
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV PUPPETEER_SKIP_DOWNLOAD=true

# คัดลอก build dependencies
COPY --from=build-deps /app/node_modules ./node_modules
COPY --from=build-deps /app/package*.json ./

# คัดลอก Prisma schema ก่อน (เพื่อให้ cache ทำงาน)
COPY prisma ./prisma

# Generate Prisma client ก่อน (เพื่อให้ cache ทำงาน)
RUN npx prisma generate

# คัดลอก source code ทั้งหมด (layer นี้จะ rebuild เมื่อโค้ดเปลี่ยน)
COPY . .

# Build Next.js สำหรับ UAT
RUN npm run build

# Stage 5: UAT Runner - Production image สำหรับ UAT
FROM base AS runner

# สร้าง non-root user
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs

# Environment variables สำหรับ UAT (ภายในยังคงใช้ port 3000)
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV PORT=3000

# คัดลอกเฉพาะ production dependencies
COPY --from=deps /app/node_modules ./node_modules

# คัดลอกเฉพาะไฟล์ที่จำเป็นสำหรับ Next.js standalone
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static
COPY --from=builder --chown=nextjs:nodejs /app/public ./public

# คัดลอก Prisma client ที่ generate แล้ว
COPY --from=builder --chown=nextjs:nodejs /app/node_modules/.prisma ./node_modules/.prisma
COPY --from=builder --chown=nextjs:nodejs /app/prisma ./prisma

# เปลี่ยนเป็น non-root user
USER nextjs

# เปิด port 3000 ภายใน (จะ map เป็น 3002 ภายนอก)
EXPOSE 3000

# ใช้ dumb-init สำหรับ proper signal handling
CMD ["dumb-init", "node", "server.js"] 