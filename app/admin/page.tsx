"use client";

import {
  useState,
  createContext,
  useContext,
  ReactNode,
  useCallback,
  useRef,
} from "react";
import Link from "next/link";
import { Role } from "@prisma/client";
import {
  QueryClient,
  QueryClientProvider,
  useQuery,
  useMutation,
  useQueryClient,
} from "react-query";
import { debounce } from "lodash";

// Services
import {
  deleteUser,
  getUsers,
  updateUserRole,
  resetUserPassword,
  getTransformers,
  createTransformer,
  updateTransformer,
  deleteTransformer,
  bulkUpsertTransformers,
} from "../api/action/User";
import { getWorkCenters } from "../api/action/getWorkCentersAndBranches";
import {
  getOMSStatusDistributionByWorkCenter,
  getOMSStatusByWorkCenter,
} from "../api/action/dashboard";
import { getPowerOutageRequests } from "../api/action/powerOutageRequest";

// ---------- Types ---------- //

// ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
interface User {
  id: number;
  fullName: string;
  employeeId: string;
  role: Role;
  workCenter: {
    name: string;
  };
  branch: {
    fullName: string;
  };
}

// ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡πâ‡∏≠‡πÅ‡∏õ‡∏•‡∏á
interface Transformer {
  id: number;
  transformerNumber: string;
  gisDetails: string;
  createdAt: Date;
  updatedAt: Date;
}

// ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∏‡∏î‡∏£‡∏ß‡∏°‡∏á‡∏≤‡∏ô
interface WorkCenter {
  id: number;
  name: string;
}

// ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤
interface UserSearchParams {
  page: number;
  limit: number;
  search: string;
  workCenterId?: string;
}

// ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Transformer
interface TransformerSearchParams {
  page: number;
  limit: number;
  search: string;
}

// ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô Context
interface UserContextType {
  searchParams: UserSearchParams;
  updateSearchParams: (newParams: Partial<UserSearchParams>) => void;
  transformerSearchParams: TransformerSearchParams;
  updateTransformerSearchParams: (
    newParams: Partial<TransformerSearchParams>,
  ) => void;
  activeTab: string;
  setActiveTab: (tab: string) => void;
}

// ---------- ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà ---------- //

// ‡πÅ‡∏õ‡∏•‡∏Ñ‡πà‡∏≤ Role Enum ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
const ROLE_TRANSLATIONS: { [key in Role]: string } = {
  VIEWER: "‡∏Å‡∏ü‡∏ï.3",
  ADMIN: "Admin",
  MANAGER: "‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏à‡∏∏‡∏î‡∏£‡∏ß‡∏°‡∏á‡∏≤‡∏ô",
  SUPERVISOR: "‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô EO",
  USER: "‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏´‡∏°‡πâ‡∏≠‡πÅ‡∏õ‡∏•‡∏á",
};

// ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤
const USERS_PER_PAGE = 10;

// ‡∏Ñ‡πà‡∏≤‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ - ‡∏¢‡πâ‡∏≤‡∏¢‡∏°‡∏≤‡πÑ‡∏ß‡πâ‡∏ô‡∏≠‡∏Å component
const SECURITY_LIMITS = {
  MAX_FILE_SIZE: 100 * 1024 * 1024, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô 100MB
  MAX_ROWS: 100000, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô 100,000 ‡πÅ‡∏ñ‡∏ß
  MAX_FIELD_LENGTH: 500, // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ü‡∏¥‡∏•‡∏î‡πå
  MIN_UPLOAD_INTERVAL: 15000, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô 15 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏≤‡∏Å
};

// CSV Parser function - ‡∏¢‡πâ‡∏≤‡∏¢‡∏°‡∏≤‡πÑ‡∏ß‡πâ‡∏ô‡∏≠‡∏Å component
const parseCSVLine = (line: string): string[] => {
  const result: string[] = [];
  let current = "";
  let inQuotes = false;

  for (let i = 0; i < line.length; i++) {
    const char = line[i];

    if (char === '"') {
      if (inQuotes && line[i + 1] === '"') {
        current += '"';
        i++; // skip next quote
      } else {
        inQuotes = !inQuotes;
      }
    } else if (char === "," && !inQuotes) {
      result.push(current.trim());
      current = "";
    } else {
      current += char;
    }
  }

  result.push(current.trim());
  return result;
};

// ---------- Context ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ---------- //

const UserContext = createContext<UserContextType | undefined>(undefined);

// Provider ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
const UserProvider = ({
  children,
  initialParams,
}: {
  children: ReactNode;
  initialParams: UserSearchParams;
}) => {
  const [searchParams, setSearchParams] =
    useState<UserSearchParams>(initialParams);
  const [transformerSearchParams, setTransformerSearchParams] =
    useState<TransformerSearchParams>({
      page: 1,
      limit: USERS_PER_PAGE,
      search: "",
    });
  const [activeTab, setActiveTab] = useState<string>("transformers");

  const updateSearchParams = (newParams: Partial<UserSearchParams>) => {
    setSearchParams((prev) => ({ ...prev, ...newParams }));
  };

  const updateTransformerSearchParams = (
    newParams: Partial<TransformerSearchParams>,
  ) => {
    setTransformerSearchParams((prev) => ({ ...prev, ...newParams }));
  };

  return (
    <UserContext.Provider
      value={{
        searchParams,
        updateSearchParams,
        transformerSearchParams,
        updateTransformerSearchParams,
        activeTab,
        setActiveTab,
      }}
    >
      {children}
    </UserContext.Provider>
  );
};

// Hook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á Context
const useUserContext = () => {
  const context = useContext(UserContext);
  if (context === undefined) {
    throw new Error("useUserContext ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô UserProvider");
  }
  return context;
};

// ---------- Components ---------- //

// ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏£‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
const LoadingSpinner = () => (
  <div className="flex justify-center items-center h-64">
    <div className="animate-spin rounded-full h-32 w-32 border-t-2 border-b-2 border-blue-600"></div>
  </div>
);

// ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
const ErrorMessage = ({ message }: { message: string }) => (
  <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded text-center mt-4">
    {message}
  </div>
);

// Navigation Tabs
const NavigationTabs = () => {
  const { activeTab, setActiveTab } = useUserContext();

  const tabs = [
    { id: "transformers", label: "‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡∏°‡πâ‡∏≠‡πÅ‡∏õ‡∏•‡∏á", icon: "üîå" },
    { id: "users", label: "‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ", icon: "üë•" },
    { id: "export", label: "Export ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", icon: "üì§" },
  ];

  return (
    <div className="border-b border-gray-200 mb-6">
      <nav className="-mb-px flex space-x-8">
        {tabs.map((tab) => (
          <button
            key={tab.id}
            onClick={() => setActiveTab(tab.id)}
            className={`py-4 px-1 border-b-2 font-medium text-sm transition-colors duration-200 ${
              activeTab === tab.id
                ? "border-blue-500 text-blue-600"
                : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300"
            }`}
          >
            <span className="mr-2">{tab.icon}</span>
            {tab.label}
          </button>
        ))}
      </nav>
    </div>
  );
};

// CSV Upload Component with Security Enhancements
const CSVUploadComponent = () => {
  const fileInputRef = useRef<HTMLInputElement>(null);
  const [isUploading, setIsUploading] = useState(false);
  const [uploadResult, setUploadResult] = useState<any>(null);
  const [lastUploadTime, setLastUploadTime] = useState<number>(0);
  const [uploadProgress, setUploadProgress] = useState<{
    show: boolean;
    message: string;
    percentage?: number;
    currentBatch?: number;
    totalBatches?: number;
    processedRecords?: number;
    totalRecords?: number;
  }>({ show: false, message: "" });
  const queryClient = useQueryClient();

  // Progress callback function
  const handleProgress = useCallback(
    (progress: {
      currentBatch: number;
      totalBatches: number;
      processedRecords: number;
      totalRecords: number;
      currentOperation: string;
    }) => {
      const percentage = Math.round(
        (progress.processedRecords / progress.totalRecords) * 100,
      );
      setUploadProgress({
        show: true,
        message: progress.currentOperation,
        percentage: percentage,
        currentBatch: progress.currentBatch,
        totalBatches: progress.totalBatches,
        processedRecords: progress.processedRecords,
        totalRecords: progress.totalRecords,
      });
    },
    [],
  );

  const uploadMutation = useMutation(
    async (data: Array<{ transformerNumber: string; gisDetails: string }>) => {
      setUploadProgress({
        show: true,
        message: `‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• ${data.length.toLocaleString()} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£...`,
        percentage: 0,
        totalRecords: data.length,
      });

      // ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô chunks ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô body size limit
      // ‡∏õ‡∏£‡∏±‡∏ö chunk size ‡∏ï‡∏≤‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
      const determineChunkSize = (totalRecords: number): number => {
        if (totalRecords < 5000) return totalRecords; // ‡∏™‡πà‡∏á‡∏ó‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡πâ‡∏≠‡∏¢
        if (totalRecords < 20000) return 10000; // chunk ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
        if (totalRecords < 50000) return 15000; // chunk ‡πÉ‡∏´‡∏ç‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏≤‡∏Å
        return 20000; // chunk ‡πÉ‡∏´‡∏ç‡πà‡∏™‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
      };

      const CHUNK_SIZE = determineChunkSize(data.length);

      if (data.length <= CHUNK_SIZE) {
        // ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ chunk size ‡∏™‡πà‡∏á‡∏ó‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
        return bulkUpsertTransformers(data);
      } else {
        // ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô chunks ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏ó‡∏µ‡∏•‡∏∞ chunk
        const chunks = [];
        for (let i = 0; i < data.length; i += CHUNK_SIZE) {
          chunks.push(data.slice(i, i + CHUNK_SIZE));
        }

        setUploadProgress({
          show: true,
          message: `‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô ${chunks.length} ‡∏™‡πà‡∏ß‡∏ô (${CHUNK_SIZE.toLocaleString()} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏™‡πà‡∏ß‡∏ô) ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 1...`,
          percentage: 0,
          totalRecords: data.length,
          currentBatch: 1,
          totalBatches: chunks.length,
        });

        // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• chunks ‡∏ó‡∏µ‡∏•‡∏∞‡∏™‡πà‡∏ß‡∏ô
        const combinedResults = {
          success: true,
          results: {
            success: 0,
            updated: 0,
            created: 0,
            errors: [] as any[],
            duplicatesRemoved: 0,
            duplicatesList: [] as any[],
          },
          message: "",
        };

        for (let i = 0; i < chunks.length; i++) {
          const chunk = chunks[i];
          const chunkNumber = i + 1;

          setUploadProgress({
            show: true,
            message: `‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà ${chunkNumber}/${chunks.length} (${chunk.length.toLocaleString()} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£) - ‡πÉ‡∏ä‡πâ‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ High-Performance`,
            percentage: Math.round((i / chunks.length) * 90), // ‡πÄ‡∏Å‡πá‡∏ö 10% ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö completion
            totalRecords: data.length,
            processedRecords: i * CHUNK_SIZE,
            currentBatch: chunkNumber,
            totalBatches: chunks.length,
          });

          try {
            const chunkResult = await bulkUpsertTransformers(chunk);

            if (chunkResult.success && chunkResult.results) {
              // ‡∏£‡∏ß‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
              combinedResults.results.success +=
                chunkResult.results.success || 0;
              combinedResults.results.updated +=
                chunkResult.results.updated || 0;
              combinedResults.results.created +=
                chunkResult.results.created || 0;
              combinedResults.results.duplicatesRemoved +=
                (chunkResult.results as any).duplicatesRemoved || 0;

              // ‡∏£‡∏ß‡∏° errors ‡πÅ‡∏•‡∏∞ duplicates
              if (chunkResult.results.errors) {
                combinedResults.results.errors.push(
                  ...chunkResult.results.errors,
                );
              }
              if ((chunkResult.results as any).duplicatesList) {
                combinedResults.results.duplicatesList.push(
                  ...(chunkResult.results as any).duplicatesList,
                );
              }
            } else {
              // ‡∏ñ‡πâ‡∏≤ chunk ‡∏ô‡∏µ‡πâ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
              combinedResults.success = false;
              combinedResults.results.errors.push({
                row: i * CHUNK_SIZE + 1,
                transformerNumber: `Chunk ${chunkNumber}`,
                error:
                  chunkResult.error ||
                  `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà ${chunkNumber}`,
              });
            }

            // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó progress ‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏ï‡πà‡∏•‡∏∞ chunk
            const completionPercentage = Math.round(
              ((i + 1) / chunks.length) * 95,
            ); // ‡πÄ‡∏Å‡πá‡∏ö 5% ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö final
            setUploadProgress({
              show: true,
              message: `‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà ${chunkNumber}/${chunks.length} - ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ UNNEST`,
              percentage: completionPercentage,
              totalRecords: data.length,
              processedRecords: Math.min((i + 1) * CHUNK_SIZE, data.length),
              currentBatch: chunkNumber,
              totalBatches: chunks.length,
            });
          } catch (error) {
            console.error(`Error processing chunk ${chunkNumber}:`, error);
            combinedResults.results.errors.push({
              row: i * CHUNK_SIZE + 1,
              transformerNumber: `Chunk ${chunkNumber}`,
              error: `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà ${chunkNumber}: ${error instanceof Error ? error.message : "Unknown error"}`,
            });
          }
        }

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏£‡∏∏‡∏õ
        combinedResults.message = `‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏ö‡∏ö High-Performance: ${data.length.toLocaleString()} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô ${chunks.length} ‡∏™‡πà‡∏ß‡∏ô ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ${combinedResults.results.success.toLocaleString()} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà ${combinedResults.results.created.toLocaleString()}, ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó ${combinedResults.results.updated.toLocaleString()})${combinedResults.results.duplicatesRemoved > 0 ? `, ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥ ${combinedResults.results.duplicatesRemoved.toLocaleString()} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£` : ""}, ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ${combinedResults.results.errors.length.toLocaleString()} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`;

        return combinedResults;
      }
    },
    {
      onSuccess: (result) => {
        setUploadResult(result);
        queryClient.invalidateQueries("transformers");
        if (fileInputRef.current) {
          fileInputRef.current.value = "";
        }
        setLastUploadTime(Date.now());
        setUploadProgress({ show: false, message: "" });
      },
      onError: (error) => {
        console.error("Upload error:", error);
        setUploadResult({
          success: false,
          error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà",
        });
        setUploadProgress({ show: false, message: "" });
      },
      onSettled: () => {
        setIsUploading(false);
      },
    },
  );

  const validateFileContent = useCallback(
    (content: string): { isValid: boolean; error?: string } => {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤
      if (content.length > SECURITY_LIMITS.MAX_FILE_SIZE) {
        return {
          isValid: false,
          error: `‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î ${SECURITY_LIMITS.MAX_FILE_SIZE / 1024 / 1024}MB)`,
        };
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß
      const lines = content.split("\n").filter((line) => line.trim());
      if (lines.length > SECURITY_LIMITS.MAX_ROWS + 1) {
        // +1 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö header
        return {
          isValid: false,
          error: `‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î ${SECURITY_LIMITS.MAX_ROWS.toLocaleString()} ‡πÅ‡∏ñ‡∏ß)`,
        };
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢
      const suspiciousPatterns = [
        /<script/i,
        /javascript:/i,
        /vbscript:/i,
        /onload/i,
        /onerror/i,
        /eval\(/i,
        /document\./i,
        /window\./i,
      ];

      for (const pattern of suspiciousPatterns) {
        if (pattern.test(content)) {
          return { isValid: false, error: "‡∏û‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå" };
        }
      }

      return { isValid: true };
    },
    [],
  );

  const handleFileUpload = useCallback(
    async (event: React.ChangeEvent<HTMLInputElement>) => {
      const file = event.target.files?.[0];
      if (!file) return;

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö rate limiting
      const now = Date.now();
      if (now - lastUploadTime < SECURITY_LIMITS.MIN_UPLOAD_INTERVAL) {
        const remainingTime = Math.ceil(
          (SECURITY_LIMITS.MIN_UPLOAD_INTERVAL - (now - lastUploadTime)) / 1000,
        );
        alert(`‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠ ${remainingTime} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà`);
        return;
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå
      if (!file.name.toLowerCase().endsWith(".csv")) {
        alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (.csv)");
        return;
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå
      if (file.size > SECURITY_LIMITS.MAX_FILE_SIZE) {
        alert(
          `‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î ${SECURITY_LIMITS.MAX_FILE_SIZE / 1024 / 1024}MB)`,
        );
        return;
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö MIME type (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•)
      if (
        file.type !== "text/csv" &&
        file.type !== "application/csv" &&
        file.type !== ""
      ) {
        alert("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå CSV ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô");
        return;
      }

      setIsUploading(true);
      setUploadResult(null);
      setUploadProgress({
        show: true,
        message: "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå...",
        percentage: 10,
      });

      try {
        const text = await file.text();

        setUploadProgress({
          show: true,
          message: "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢...",
          percentage: 20,
        });

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Ç‡∏≠‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤
        const validation = validateFileContent(text);
        if (!validation.isValid) {
          alert(validation.error);
          setIsUploading(false);
          setUploadProgress({ show: false, message: "" });
          return;
        }

        setUploadProgress({
          show: true,
          message: "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...",
          percentage: 30,
        });

        const lines = text.split("\n").filter((line) => line.trim());

        if (lines.length < 2) {
          alert("‡πÑ‡∏ü‡∏•‡πå CSV ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2 ‡πÅ‡∏ñ‡∏ß (header + data)");
          setIsUploading(false);
          setUploadProgress({ show: false, message: "" });
          return;
        }

        // ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏û‡∏ö
        const dataRowCount = lines.length - 1;
        setUploadProgress({
          show: true,
          message: `‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ${dataRowCount.toLocaleString()} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö header...`,
          percentage: 40,
        });

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö header
        const header = lines[0].toLowerCase();
        if (
          !header.includes("transformernumber") &&
          !header.includes("transformer")
        ) {
          alert("‡πÑ‡∏ü‡∏•‡πå CSV ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå transformerNumber");
          setIsUploading(false);
          setUploadProgress({ show: false, message: "" });
          return;
        }
        if (!header.includes("gisdetails") && !header.includes("gis")) {
          alert("‡πÑ‡∏ü‡∏•‡πå CSV ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå gisDetails");
          setIsUploading(false);
          setUploadProgress({ show: false, message: "" });
          return;
        }

        setUploadProgress({
          show: true,
          message: `‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ${dataRowCount.toLocaleString()} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£...`,
          percentage: 50,
        });

        // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏ß‡∏¢ CSV parser ‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Å‡∏ß‡πà‡∏≤
        const data = lines
          .slice(1)
          .map((line, index) => {
            const columns = parseCSVLine(line);
            const transformerNumber = (columns[0] || "").trim();
            const gisDetails = (columns[1] || "").trim();

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            if (transformerNumber.length > SECURITY_LIMITS.MAX_FIELD_LENGTH) {
              throw new Error(
                `‡πÅ‡∏ñ‡∏ß ${index + 2}: ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡∏°‡πâ‡∏≠‡πÅ‡∏õ‡∏•‡∏á‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î ${SECURITY_LIMITS.MAX_FIELD_LENGTH} ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)`,
              );
            }
            if (gisDetails.length > SECURITY_LIMITS.MAX_FIELD_LENGTH) {
              throw new Error(
                `‡πÅ‡∏ñ‡∏ß ${index + 2}: ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î GIS ‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î ${SECURITY_LIMITS.MAX_FIELD_LENGTH} ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)`,
              );
            }

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡∏°‡πâ‡∏≠‡πÅ‡∏õ‡∏•‡∏á (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô injection)
            if (
              transformerNumber &&
              !/^[a-zA-Z0-9\-_\.]+$/.test(transformerNumber)
            ) {
              throw new Error(
                `‡πÅ‡∏ñ‡∏ß ${index + 2}: ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡∏°‡πâ‡∏≠‡πÅ‡∏õ‡∏•‡∏á‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï (‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ a-z, A-Z, 0-9, -, _, .)`,
              );
            }

            return {
              transformerNumber,
              gisDetails,
            };
          })
          .filter((item) => item.transformerNumber && item.gisDetails);

        if (data.length === 0) {
          alert("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV");
          setIsUploading(false);
          setUploadProgress({ show: false, message: "" });
          return;
        }

        // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏£‡∏±‡πâ‡∏á
        if (data.length > SECURITY_LIMITS.MAX_ROWS) {
          alert(
            `‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î ${SECURITY_LIMITS.MAX_ROWS.toLocaleString()} ‡πÅ‡∏ñ‡∏ß) ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏ö‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡πÜ`,
          );
          setIsUploading(false);
          setUploadProgress({ show: false, message: "" });
          return;
        }

        // ‡πÅ‡∏™‡∏î‡∏á warning ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏≤‡∏Å
        if (data.length > 10000) {
          const estimatedTime = Math.ceil(data.length / 5000); // ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 5000 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
          const confirmed = window.confirm(
            `üöÄ High-Performance Upload\n\n‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ${data.length.toLocaleString()} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n\n` +
              `‚ö° ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡πÄ‡∏ß‡∏•‡∏≤: ${estimatedTime} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (‡πÉ‡∏ä‡πâ‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ UNNEST)\n` +
              `üìà ‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏ß‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏° 10-20 ‡πÄ‡∏ó‡πà‡∏≤!\n\n` +
              `‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞:\n` +
              `‚Ä¢ ‡πÅ‡∏ö‡πà‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥\n` +
              `‚Ä¢ ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πâ‡∏≤‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏ö‡∏ö real-time\n` +
              `‚Ä¢ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞\n\n` +
              `‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`,
          );
          if (!confirmed) {
            setIsUploading(false);
            setUploadProgress({ show: false, message: "" });
            return;
          }
        }

        // Simulate real-time progress updates
        const progressInterval = setInterval(() => {
          setUploadProgress((prev) => {
            if (prev.percentage && prev.percentage < 95) {
              return {
                ...prev,
                percentage: prev.percentage + 1,
                message: `‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå... (${prev.percentage + 1}%)`,
              };
            }
            return prev;
          });
        }, 1000);

        uploadMutation.mutate(data);

        // Clear interval when upload starts
        setTimeout(() => {
          clearInterval(progressInterval);
        }, 5000);
      } catch (error) {
        console.error("Error processing CSV:", error);
        const errorMessage =
          error instanceof Error
            ? error.message
            : "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV";
        alert(errorMessage);
        setIsUploading(false);
        setUploadProgress({ show: false, message: "" });
      }
    },
    [uploadMutation, lastUploadTime, validateFileContent],
  );

  const isRateLimited =
    Date.now() - lastUploadTime < SECURITY_LIMITS.MIN_UPLOAD_INTERVAL;

  return (
    <div className="bg-white rounded-lg shadow-md p-6 mb-6">
      <h3 className="text-lg font-bold text-gray-800 mb-4">
        üöÄ ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• CSV ‡πÅ‡∏ö‡∏ö High-Performance (‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î!)
      </h3>

      <div className="space-y-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV (‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: transformerNumber, gisDetails)
          </label>
          <input
            ref={fileInputRef}
            type="file"
            accept=".csv"
            onChange={handleFileUpload}
            disabled={isUploading || isRateLimited}
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:bg-gray-100"
          />
          {isRateLimited && (
            <p className="text-sm text-orange-600 mt-1">
              ‚è≥ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠{" "}
              {Math.ceil(
                (SECURITY_LIMITS.MIN_UPLOAD_INTERVAL -
                  (Date.now() - lastUploadTime)) /
                  1000,
              )}{" "}
              ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ)
            </p>
          )}
        </div>

        <div className="bg-blue-50 border border-blue-200 rounded-md p-3">
          <h4 className="font-medium text-blue-800 mb-2">üìã ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ü‡∏•‡πå CSV:</h4>
          <pre className="text-sm text-blue-700">
            {`transformerNumber,gisDetails
TR001,‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î GIS ‡∏´‡∏°‡πâ‡∏≠‡πÅ‡∏õ‡∏•‡∏á 1
TR002,‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î GIS ‡∏´‡∏°‡πâ‡∏≠‡πÅ‡∏õ‡∏•‡∏á 2`}
          </pre>
          <div className="text-sm text-blue-600 mt-2 space-y-1">
            <p>
              üí° ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡∏°‡πâ‡∏≠‡πÅ‡∏õ‡∏•‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
              ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ
            </p>
            <p>
              ‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î: ‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î{" "}
              {SECURITY_LIMITS.MAX_FILE_SIZE / 1024 / 1024}MB,{" "}
              {SECURITY_LIMITS.MAX_ROWS.toLocaleString()} ‡πÅ‡∏ñ‡∏ß
            </p>
            <p>üîí ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡∏°‡πâ‡∏≠‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞: a-z, A-Z, 0-9, -, _, .</p>
            <p>
              üöÄ ‡∏£‡∏∞‡∏ö‡∏ö High-Performance: ‡πÉ‡∏ä‡πâ‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ UNNEST ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
            </p>
            <p>
              ‚ö° ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏≤‡∏Å‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 100,000 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ - ‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏° 10-20
              ‡πÄ‡∏ó‡πà‡∏≤!
            </p>
            <p>
              üîÑ ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥: ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≥
            </p>
            <p>
              üìä ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 20,000+ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‡∏Ñ‡∏ß‡∏£‡∏£‡∏±‡∏ô‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ network
              ‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£
            </p>
          </div>
        </div>

        {/* Enhanced Progress Bar */}
        {uploadProgress.show && (
          <div className="bg-gray-50 border border-gray-200 rounded-md p-4">
            <div className="space-y-3">
              <div className="flex items-center space-x-3">
                <div className="animate-spin rounded-full h-5 w-5 border-t-2 border-b-2 border-blue-600"></div>
                <div className="flex-1">
                  <p className="text-sm font-medium text-gray-700">
                    {uploadProgress.message}
                  </p>
                </div>
              </div>

              {/* Progress bar */}
              {uploadProgress.percentage !== undefined && (
                <div>
                  <div className="flex justify-between text-xs text-gray-500 mb-1">
                    <span>{uploadProgress.percentage}%</span>
                    {uploadProgress.totalRecords && (
                      <span>
                        {uploadProgress.processedRecords?.toLocaleString() || 0}{" "}
                        / {uploadProgress.totalRecords.toLocaleString()} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                      </span>
                    )}
                  </div>
                  <div className="bg-gray-200 rounded-full h-3">
                    <div
                      className="bg-blue-600 h-3 rounded-full transition-all duration-500 ease-out"
                      style={{ width: `${uploadProgress.percentage}%` }}
                    ></div>
                  </div>
                </div>
              )}

              {/* Batch progress */}
              {uploadProgress.currentBatch !== undefined &&
                uploadProgress.totalBatches !== undefined && (
                  <div className="text-xs text-gray-600">
                    <div className="flex justify-between">
                      <span>
                        Batch: {uploadProgress.currentBatch} /{" "}
                        {uploadProgress.totalBatches}
                      </span>
                      <span>
                        {uploadProgress.totalBatches > 1 &&
                          `${Math.round((uploadProgress.currentBatch / uploadProgress.totalBatches) * 100)}% ‡∏Ç‡∏≠‡∏á batches ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß`}
                      </span>
                    </div>
                    {uploadProgress.totalBatches > 1 && (
                      <div className="bg-gray-200 rounded-full h-1 mt-1">
                        <div
                          className="bg-green-500 h-1 rounded-full transition-all duration-300"
                          style={{
                            width: `${(uploadProgress.currentBatch / uploadProgress.totalBatches) * 100}%`,
                          }}
                        ></div>
                      </div>
                    )}
                  </div>
                )}
            </div>
          </div>
        )}

        {isUploading && !uploadProgress.show && (
          <div className="flex items-center space-x-2 text-blue-600">
            <div className="animate-spin rounded-full h-4 w-4 border-t-2 border-b-2 border-blue-600"></div>
            <span>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•...</span>
          </div>
        )}

        {uploadResult && (
          <div
            className={`border rounded-md p-4 ${uploadResult.success ? "bg-green-50 border-green-200" : "bg-red-50 border-red-200"}`}
          >
            <h4
              className={`font-medium mb-2 ${uploadResult.success ? "text-green-800" : "text-red-800"}`}
            >
              üìä ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î
            </h4>
            <p
              className={`text-sm ${uploadResult.success ? "text-green-700" : "text-red-700"}`}
            >
              {uploadResult.message || uploadResult.error}
            </p>

            {uploadResult.success && uploadResult.results && (
              <div className="mt-3 space-y-2">
                {/* ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏´‡∏•‡∏±‡∏Å */}
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                  <div className="bg-green-100 rounded-lg p-2 text-center">
                    <div className="font-bold text-green-800">
                      {uploadResult.results.created.toLocaleString()}
                    </div>
                    <div className="text-green-600 text-xs">‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà</div>
                  </div>
                  <div className="bg-blue-100 rounded-lg p-2 text-center">
                    <div className="font-bold text-blue-800">
                      {uploadResult.results.updated.toLocaleString()}
                    </div>
                    <div className="text-blue-600 text-xs">‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó</div>
                  </div>
                  <div className="bg-yellow-100 rounded-lg p-2 text-center">
                    <div className="font-bold text-yellow-800">
                      {(
                        uploadResult.results.duplicatesRemoved || 0
                      ).toLocaleString()}
                    </div>
                    <div className="text-yellow-600 text-xs">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥</div>
                  </div>
                  <div className="bg-purple-100 rounded-lg p-2 text-center">
                    <div className="font-bold text-purple-800">
                      {uploadResult.results.success.toLocaleString()}
                    </div>
                    <div className="text-purple-600 text-xs">‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</div>
                  </div>
                </div>

                {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥ */}
                {uploadResult.results.duplicatesList &&
                  uploadResult.results.duplicatesList.length > 0 && (
                    <details className="mt-2">
                      <summary className="cursor-pointer text-yellow-600 font-medium">
                        üîÑ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥‡∏ó‡∏µ‡πà‡∏û‡∏ö:{" "}
                        <span className="font-bold">
                          {uploadResult.results.duplicatesList.length}
                        </span>{" "}
                        ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡∏°‡πâ‡∏≠‡πÅ‡∏õ‡∏•‡∏á
                      </summary>
                      <div className="mt-2 max-h-32 overflow-y-auto text-xs text-yellow-700 bg-yellow-50 rounded p-2">
                        {uploadResult.results.duplicatesList
                          .slice(0, 10)
                          .map((duplicate: any, idx: number) => (
                            <p key={idx}>
                              <strong>{duplicate.transformerNumber}</strong> -
                              ‡∏û‡∏ö‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ß {duplicate.rows.join(", ")}{" "}
                              (‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÅ‡∏ñ‡∏ß {duplicate.rows[0]})
                            </p>
                          ))}
                        {uploadResult.results.duplicatesList.length > 10 && (
                          <p className="italic">
                            ... ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å{" "}
                            {(
                              uploadResult.results.duplicatesList.length - 10
                            ).toLocaleString()}{" "}
                            ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                          </p>
                        )}
                      </div>
                    </details>
                  )}

                {/* ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î */}
                {uploadResult.results.errors.length > 0 && (
                  <details className="mt-2">
                    <summary className="cursor-pointer text-red-600 font-medium">
                      ‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:{" "}
                      <span className="font-bold">
                        {uploadResult.results.errors.length.toLocaleString()}
                      </span>{" "}
                      ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                    </summary>
                    <div className="mt-2 space-y-1 text-red-600 max-h-32 overflow-y-auto text-xs bg-red-50 rounded p-2">
                      {uploadResult.results.errors
                        .slice(0, 10)
                        .map((error: any, idx: number) => (
                          <p key={idx}>
                            ‡πÅ‡∏ñ‡∏ß {error.row}:{" "}
                            <strong>{error.transformerNumber}</strong> -{" "}
                            {error.error}
                          </p>
                        ))}
                      {uploadResult.results.errors.length > 10 && (
                        <p className="italic">
                          ... ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å{" "}
                          {(
                            uploadResult.results.errors.length - 10
                          ).toLocaleString()}{" "}
                          ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
                        </p>
                      )}
                    </div>
                  </details>
                )}
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
};

// Page Size Selector Component
const PageSizeSelector = ({
  currentPageSize,
  onPageSizeChange,
  totalCount,
}: {
  currentPageSize: number;
  onPageSizeChange: (size: number) => void;
  totalCount: number;
}) => {
  const pageSizeOptions = [10, 25, 50, 100];

  return (
    <div className="flex items-center space-x-2">
      <span className="text-sm text-gray-700">‡πÅ‡∏™‡∏î‡∏á</span>
      <select
        value={currentPageSize}
        onChange={(e) => onPageSizeChange(Number(e.target.value))}
        className="px-2 py-1 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
      >
        {pageSizeOptions.map((size) => (
          <option
            key={size}
            value={size}
            disabled={size > totalCount && totalCount > 0}
          >
            {size}
          </option>
        ))}
      </select>
      <span className="text-sm text-gray-700">‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤</span>
    </div>
  );
};

// Transformer Table Components
const TransformerSearchBar = () => {
  const { transformerSearchParams, updateTransformerSearchParams } =
    useUserContext();
  const [searchValue, setSearchValue] = useState(
    transformerSearchParams.search,
  );

  const { data } = useQuery(
    ["transformers", transformerSearchParams],
    () =>
      getTransformers(
        transformerSearchParams.page,
        transformerSearchParams.limit,
        transformerSearchParams.search,
      ),
    {
      keepPreviousData: true,
    },
  );

  const handleSearchChange = debounce((value: string) => {
    updateTransformerSearchParams({ search: value, page: 1 });
  }, 300);

  const onSearchInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    setSearchValue(value);
    handleSearchChange(value);
  };

  const handlePageSizeChange = (newSize: number) => {
    updateTransformerSearchParams({ limit: newSize, page: 1 });
  };

  return (
    <div className="space-y-4 mb-6">
      <div className="flex flex-col md:flex-row gap-4">
        <div className="flex-1">
          <input
            type="text"
            placeholder="üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡∏°‡πâ‡∏≠‡πÅ‡∏õ‡∏•‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î GIS"
            value={searchValue}
            onChange={onSearchInputChange}
            className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
        </div>
      </div>

      {/* ‡πÅ‡∏™‡∏î‡∏á PageSizeSelector ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• */}
      {data && data.totalCount > 0 && (
        <div className="flex justify-between items-center">
          <PageSizeSelector
            currentPageSize={transformerSearchParams.limit}
            onPageSizeChange={handlePageSizeChange}
            totalCount={data.totalCount}
          />
          <div className="text-sm text-gray-600">
            ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {data.totalCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
          </div>
        </div>
      )}
    </div>
  );
};

const TransformerRow = ({
  transformer,
  index,
  onEdit,
  onDelete,
}: {
  transformer: Transformer;
  index: number;
  onEdit: (transformer: Transformer) => void;
  onDelete: (id: number) => void;
}) => {
  return (
    <tr
      className={`${index % 2 === 0 ? "bg-white" : "bg-gray-50"} hover:bg-blue-50 transition-colors duration-150`}
    >
      <td className="px-6 py-4 text-sm font-medium text-gray-900">
        {transformer.transformerNumber}
      </td>
      <td className="px-6 py-4 text-sm text-gray-900 max-w-md truncate">
        {transformer.gisDetails}
      </td>
      <td className="px-6 py-4 text-sm text-gray-500">
        {new Date(transformer.createdAt).toLocaleDateString("th-TH")}
      </td>
      <td className="px-6 py-4 text-sm text-gray-500">
        {new Date(transformer.updatedAt).toLocaleDateString("th-TH")}
      </td>
      <td className="px-6 py-4">
        <div className="flex space-x-2">
          <button
            onClick={() => onEdit(transformer)}
            className="bg-blue-500 hover:bg-blue-600 text-white font-bold py-1 px-3 rounded-md transition-colors duration-200 text-sm"
          >
            ‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
          </button>
          <button
            onClick={() => onDelete(transformer.id)}
            className="bg-red-500 hover:bg-red-600 text-white font-bold py-1 px-3 rounded-md transition-colors duration-200 text-sm"
          >
            üóëÔ∏è ‡∏•‡∏ö
          </button>
        </div>
      </td>
    </tr>
  );
};

const TransformerTable = ({
  onEdit,
}: {
  onEdit: (transformer: Transformer) => void;
}) => {
  const { transformerSearchParams } = useUserContext();
  const queryClient = useQueryClient();

  const { data, isLoading, error } = useQuery(
    ["transformers", transformerSearchParams],
    () =>
      getTransformers(
        transformerSearchParams.page,
        transformerSearchParams.limit,
        transformerSearchParams.search,
      ),
    {
      keepPreviousData: true,
      refetchOnWindowFocus: false,
    },
  );

  const deleteMutation = useMutation((id: number) => deleteTransformer(id), {
    onSuccess: (result) => {
      if (result.success) {
        queryClient.invalidateQueries("transformers");
      } else {
        alert(result.error);
      }
    },
  });

  const handleDelete = (id: number) => {
    if (window.confirm("‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö‡∏´‡∏°‡πâ‡∏≠‡πÅ‡∏õ‡∏•‡∏á‡∏ô‡∏µ‡πâ?")) {
      deleteMutation.mutate(id);
    }
  };

  if (isLoading) return <LoadingSpinner />;
  if (error) return <ErrorMessage message="‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡πâ‡∏≠‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏î‡πâ" />;
  if (!data?.transformers || data.transformers.length === 0) {
    return (
      <div className="bg-white rounded-lg shadow-md p-8 text-center">
        <div className="text-gray-400 text-6xl mb-4">üîå</div>
        <p className="text-gray-500 text-lg">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡πâ‡∏≠‡πÅ‡∏õ‡∏•‡∏á</p>
      </div>
    );
  }

  return (
    <div className="bg-white rounded-lg shadow-md overflow-hidden">
      <div className="overflow-x-auto">
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-gray-800">
            <tr>
              <th className="px-6 py-3 text-left text-xs font-medium text-white uppercase tracking-wider">
                ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡∏°‡πâ‡∏≠‡πÅ‡∏õ‡∏•‡∏á
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-white uppercase tracking-wider">
                ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î GIS
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-white uppercase tracking-wider">
                ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-white uppercase tracking-wider">
                ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-white uppercase tracking-wider">
                ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
              </th>
            </tr>
          </thead>
          <tbody className="divide-y divide-gray-200">
            {data.transformers.map((transformer, index) => (
              <TransformerRow
                key={transformer.id}
                transformer={transformer}
                index={index}
                onEdit={onEdit}
                onDelete={handleDelete}
              />
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

const TransformerPagination = () => {
  const { transformerSearchParams, updateTransformerSearchParams } =
    useUserContext();

  const { data } = useQuery(
    ["transformers", transformerSearchParams],
    () =>
      getTransformers(
        transformerSearchParams.page,
        transformerSearchParams.limit,
        transformerSearchParams.search,
      ),
    {
      keepPreviousData: true,
    },
  );

  if (!data || data.totalPages <= 1) return null;

  const currentPage = transformerSearchParams.page;
  const totalPages = data.totalPages;

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á
  const getPageNumbers = () => {
    const delta = 2; // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≠‡∏ö‡πÜ ‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    const range = [];
    const rangeWithDots = [];

    for (
      let i = Math.max(2, currentPage - delta);
      i <= Math.min(totalPages - 1, currentPage + delta);
      i++
    ) {
      range.push(i);
    }

    if (currentPage - delta > 2) {
      rangeWithDots.push(1, "...");
    } else {
      rangeWithDots.push(1);
    }

    rangeWithDots.push(...range);

    if (currentPage + delta < totalPages - 1) {
      rangeWithDots.push("...", totalPages);
    } else if (totalPages > 1) {
      rangeWithDots.push(totalPages);
    }

    return rangeWithDots;
  };

  const pageNumbers = getPageNumbers();

  return (
    <div className="mt-6">
      <div className="flex items-center justify-between">
        {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ */}
        <div className="text-sm text-gray-700">
          ‡πÅ‡∏™‡∏î‡∏á{" "}
          <span className="font-medium">
            {(currentPage - 1) * transformerSearchParams.limit + 1}
          </span>{" "}
          ‡∏ñ‡∏∂‡∏á{" "}
          <span className="font-medium">
            {Math.min(
              currentPage * transformerSearchParams.limit,
              data.totalCount,
            )}
          </span>{" "}
          ‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î <span className="font-medium">{data.totalCount}</span>{" "}
          ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
        </div>

        {/* ‡∏õ‡∏∏‡πà‡∏° Pagination */}
        <nav className="flex space-x-1">
          {/* ‡∏õ‡∏∏‡πà‡∏°‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å */}
          <button
            onClick={() => updateTransformerSearchParams({ page: 1 })}
            disabled={currentPage === 1}
            className={`px-3 py-2 text-sm font-medium rounded-md transition-colors duration-200 ${
              currentPage === 1
                ? "bg-gray-100 text-gray-400 cursor-not-allowed"
                : "bg-white text-gray-700 border border-gray-300 hover:bg-gray-50"
            }`}
            title="‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å"
          >
            ‚ü™
          </button>

          {/* ‡∏õ‡∏∏‡πà‡∏°‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ */}
          <button
            onClick={() =>
              updateTransformerSearchParams({ page: currentPage - 1 })
            }
            disabled={currentPage === 1}
            className={`px-3 py-2 text-sm font-medium rounded-md transition-colors duration-200 ${
              currentPage === 1
                ? "bg-gray-100 text-gray-400 cursor-not-allowed"
                : "bg-white text-gray-700 border border-gray-300 hover:bg-gray-50"
            }`}
            title="‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤"
          >
            ‚Äπ
          </button>

          {/* ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤ */}
          {pageNumbers.map((pageNumber, index) => (
            <button
              key={index}
              onClick={() => {
                if (typeof pageNumber === "number") {
                  updateTransformerSearchParams({ page: pageNumber });
                }
              }}
              disabled={pageNumber === "..."}
              className={`px-4 py-2 text-sm font-medium rounded-md transition-colors duration-200 ${
                pageNumber === currentPage
                  ? "bg-blue-600 text-white border border-blue-600"
                  : pageNumber === "..."
                    ? "bg-white text-gray-400 cursor-default"
                    : "bg-white text-gray-700 border border-gray-300 hover:bg-gray-50"
              }`}
            >
              {pageNumber}
            </button>
          ))}

          {/* ‡∏õ‡∏∏‡πà‡∏°‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ */}
          <button
            onClick={() =>
              updateTransformerSearchParams({ page: currentPage + 1 })
            }
            disabled={currentPage === totalPages}
            className={`px-3 py-2 text-sm font-medium rounded-md transition-colors duration-200 ${
              currentPage === totalPages
                ? "bg-gray-100 text-gray-400 cursor-not-allowed"
                : "bg-white text-gray-700 border border-gray-300 hover:bg-gray-50"
            }`}
            title="‡∏´‡∏ô‡πâ‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ"
          >
            ‚Ä∫
          </button>

          {/* ‡∏õ‡∏∏‡πà‡∏°‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ */}
          <button
            onClick={() => updateTransformerSearchParams({ page: totalPages })}
            disabled={currentPage === totalPages}
            className={`px-3 py-2 text-sm font-medium rounded-md transition-colors duration-200 ${
              currentPage === totalPages
                ? "bg-gray-100 text-gray-400 cursor-not-allowed"
                : "bg-white text-gray-700 border border-gray-300 hover:bg-gray-50"
            }`}
            title="‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢"
          >
            ‚ü´
          </button>
        </nav>
      </div>
    </div>
  );
};

// Main Transformer Management Component
const TransformerManagement = () => {
  const [editingTransformer, setEditingTransformer] =
    useState<Transformer | null>(null);
  const [showForm, setShowForm] = useState(false);
  const queryClient = useQueryClient();

  const createMutation = useMutation(
    (data: { transformerNumber: string; gisDetails: string }) =>
      createTransformer(data),
    {
      onSuccess: (result) => {
        if (result.success) {
          queryClient.invalidateQueries("transformers");
          setShowForm(false);
        } else {
          alert(result.error);
        }
      },
    },
  );

  const updateMutation = useMutation(
    ({
      id,
      data,
    }: {
      id: number;
      data: { transformerNumber: string; gisDetails: string };
    }) => updateTransformer(id, data),
    {
      onSuccess: (result) => {
        if (result.success) {
          queryClient.invalidateQueries("transformers");
          setEditingTransformer(null);
          setShowForm(false);
        } else {
          alert(result.error);
        }
      },
    },
  );

  const handleSubmit = (data: {
    transformerNumber: string;
    gisDetails: string;
  }) => {
    if (editingTransformer) {
      updateMutation.mutate({ id: editingTransformer.id, data });
    } else {
      createMutation.mutate(data);
    }
  };

  const handleEdit = (transformer: Transformer) => {
    setEditingTransformer(transformer);
    setShowForm(true);
  };

  const handleCancel = () => {
    setEditingTransformer(null);
    setShowForm(false);
  };

  return (
    <div>
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-2xl font-bold text-gray-800">
          üîå ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡πâ‡∏≠‡πÅ‡∏õ‡∏•‡∏á
        </h2>
        <button
          onClick={() => setShowForm(true)}
          className="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-6 rounded-md transition-colors duration-200"
        >
          ‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡πâ‡∏≠‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏´‡∏°‡πà
        </button>
      </div>

      <CSVUploadComponent />

      {showForm && (
        <TransformerForm
          transformer={editingTransformer || undefined}
          onSubmit={handleSubmit}
          onCancel={handleCancel}
        />
      )}

      <TransformerSearchBar />
      <TransformerTable onEdit={handleEdit} />
      <TransformerPagination />
    </div>
  );
};

// Export Data Component (‡∏£‡∏±‡∏Å‡∏©‡∏≤‡πÑ‡∏ß‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
const ExportDataComponent = () => {
  const [dateFrom, setDateFrom] = useState(
    new Date().toISOString().split("T")[0],
  );
  const [dateTo, setDateTo] = useState(new Date().toISOString().split("T")[0]);
  const [isExporting, setIsExporting] = useState(false);

  const { data: powerOutageData } = useQuery(
    ["power-outage-export"],
    () => getPowerOutageRequests(),
    { staleTime: 5 * 60 * 1000, refetchOnWindowFocus: false },
  );

  const handleExport = useCallback(async () => {
    if (!powerOutageData || !powerOutageData.data) return;

    setIsExporting(true);
    try {
      const filteredData = powerOutageData.data.filter((item: any) => {
        const outageDate = new Date(item.outageDate);
        const fromDate = new Date(dateFrom);
        const toDate = new Date(dateTo);
        return outageDate >= fromDate && outageDate <= toDate;
      });

      const csvHeaders = [
        "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏±‡∏ö‡πÑ‡∏ü",
        "‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°",
        "‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î",
        "‡∏´‡∏°‡πâ‡∏≠‡πÅ‡∏õ‡∏•‡∏á",
        "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î GIS",
        "‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà",
        "‡∏à‡∏∏‡∏î‡∏£‡∏ß‡∏°‡∏á‡∏≤‡∏ô",
        "‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î",
        "‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á",
        "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏Ç‡∏≠",
        "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ OMS",
        "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á",
      ];

      const csvData = filteredData.map((item: any) => [
        new Date(item.outageDate).toLocaleDateString("th-TH"),
        new Date(item.startTime).toLocaleTimeString("th-TH"),
        new Date(item.endTime).toLocaleTimeString("th-TH"),
        item.transformerNumber,
        item.gisDetails,
        item.area || "",
        item.workCenter.name,
        item.branch.shortName,
        item.createdBy.fullName,
        item.statusRequest,
        item.omsStatus,
        new Date(item.createdAt).toLocaleDateString("th-TH"),
      ]);

      const csvContent = [csvHeaders, ...csvData]
        .map((row: any[]) => row.map((field: any) => `"${field}"`).join(","))
        .join("\n");

      const blob = new Blob(["\uFEFF" + csvContent], {
        type: "text/csv;charset=utf-8;",
      });
      const link = document.createElement("a");
      const url = URL.createObjectURL(blob);
      link.setAttribute("href", url);
      link.setAttribute(
        "download",
        `power-outage-requests_${dateFrom}_${dateTo}.csv`,
      );
      link.style.visibility = "hidden";
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    } catch (error) {
      console.error("Export error:", error);
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ Export ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
    } finally {
      setIsExporting(false);
    }
  }, [powerOutageData, dateFrom, dateTo]);

  return (
    <div className="bg-white rounded-lg shadow-md p-6">
      <h2 className="text-2xl font-bold text-gray-800 mb-6">
        Export ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏î‡∏±‡∏ö‡πÑ‡∏ü
      </h2>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
          </label>
          <input
            type="date"
            value={dateFrom}
            onChange={(e) => setDateFrom(e.target.value)}
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î
          </label>
          <input
            type="date"
            value={dateTo}
            onChange={(e) => setDateTo(e.target.value)}
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
        </div>

        <div className="flex items-end">
          <button
            onClick={handleExport}
            disabled={isExporting || !powerOutageData}
            className="w-full bg-green-600 hover:bg-green-700 disabled:bg-gray-400 text-white font-bold py-2 px-4 rounded-md transition-colors duration-200"
          >
            {isExporting ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á Export..." : "üì§ Export ‡πÄ‡∏õ‡πá‡∏ô CSV"}
          </button>
        </div>
      </div>

      <div className="bg-gray-50 rounded-md p-4">
        <h3 className="font-medium text-gray-800 mb-2">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞ Export</h3>
        <p className="text-sm text-gray-600">
          ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:{" "}
          <span className="font-medium">
            {powerOutageData?.pagination?.total || 0}
          </span>{" "}
          ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
        </p>
        <p className="text-sm text-gray-600 mt-1">
          ‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏∞‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏±‡∏ö‡πÑ‡∏ü, ‡πÄ‡∏ß‡∏•‡∏≤, ‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏, ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î, ‡∏´‡∏°‡πâ‡∏≠‡πÅ‡∏õ‡∏•‡∏á,
          ‡∏à‡∏∏‡∏î‡∏£‡∏ß‡∏°‡∏á‡∏≤‡∏ô, ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ‡πÅ‡∏•‡∏∞‡∏≠‡∏∑‡πà‡∏ô‡πÜ
        </p>
      </div>
    </div>
  );
};

// User Management Components (‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà)
const SearchBar = () => {
  const { searchParams, updateSearchParams } = useUserContext();
  const [searchValue, setSearchValue] = useState(searchParams.search);

  const { data: workCenters = [], isLoading } = useQuery(
    ["workCenters"],
    async () => {
      try {
        const result = await getWorkCenters();
        return Array.isArray(result) ? result.map((item) => ({ ...item })) : [];
      } catch (error) {
        console.error("Error fetching work centers:", error);
        return [];
      }
    },
    {
      staleTime: 5 * 60 * 1000,
      refetchOnWindowFocus: false,
    },
  );

  const { data: usersData } = useQuery(
    ["users", searchParams],
    () =>
      getUsers(
        searchParams.page,
        searchParams.limit,
        searchParams.search,
        searchParams.workCenterId,
      ),
    {
      keepPreviousData: true,
    },
  );

  const handleSearchChange = debounce((value: string) => {
    updateSearchParams({ search: value, page: 1 });
  }, 300);

  const handleWorkCenterChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    const value = e.target.value;
    updateSearchParams({ workCenterId: value, page: 1 });
  };

  const onSearchInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    setSearchValue(value);
    handleSearchChange(value);
  };

  const handlePageSizeChange = (newSize: number) => {
    updateSearchParams({ limit: newSize, page: 1 });
  };

  if (isLoading) return <div>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∏‡∏î‡∏£‡∏ß‡∏°‡∏á‡∏≤‡∏ô...</div>;

  return (
    <div className="space-y-4 mb-6">
      <div className="flex flex-col md:flex-row gap-4">
        <div className="flex-1">
          <input
            type="text"
            placeholder="üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠"
            value={searchValue}
            onChange={onSearchInputChange}
            className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
        </div>
        <div className="md:w-64">
          <select
            value={searchParams.workCenterId || ""}
            onChange={handleWorkCenterChange}
            className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            <option value="">‡∏ó‡∏∏‡∏Å‡∏à‡∏∏‡∏î‡∏£‡∏ß‡∏°‡∏á‡∏≤‡∏ô</option>
            {workCenters.map((center) => (
              <option key={center.id} value={center.id.toString()}>
                {center.name}
              </option>
            ))}
          </select>
        </div>
        <Link href="/admin/create-user">
          <button className="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-6 rounded-md transition-colors duration-200 whitespace-nowrap">
            ‚ûï ‡∏™‡∏£‡πâ‡∏≤‡∏á User ‡πÉ‡∏´‡∏°‡πà
          </button>
        </Link>
      </div>

      {/* ‡πÅ‡∏™‡∏î‡∏á PageSizeSelector ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• */}
      {usersData && usersData.totalCount > 0 && (
        <div className="flex justify-between items-center">
          <PageSizeSelector
            currentPageSize={searchParams.limit}
            onPageSizeChange={handlePageSizeChange}
            totalCount={usersData.totalCount}
          />
          <div className="text-sm text-gray-600">
            ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {usersData.totalCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
          </div>
        </div>
      )}
    </div>
  );
};

const UserRow = ({ user, index }: { user: User; index: number }) => {
  const queryClient = useQueryClient();

  const updateRoleMutation = useMutation(
    ({ userId, newRole }: { userId: number; newRole: Role }) =>
      updateUserRole(userId, newRole),
    {
      onSuccess: () => {
        queryClient.invalidateQueries("users");
      },
    },
  );

  const resetPasswordMutation = useMutation(
    (userId: number) => resetUserPassword(userId),
    {
      onSuccess: (result) => {
        if (result.success) {
          alert(`‚úÖ ${result.message}`);
        } else {
          alert(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${result.error}`);
        }
      },
      onError: () => {
        alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô");
      },
    },
  );

  const deleteMutation = useMutation((userId: number) => deleteUser(userId), {
    onSuccess: () => {
      queryClient.invalidateQueries("users");
    },
  });

  const handleRoleChange = (userId: number, newRole: Role) => {
    updateRoleMutation.mutate({ userId, newRole });
  };

  const handleResetPassword = (
    userId: number,
    employeeId: string,
    fullName: string,
  ) => {
    const confirmed = window.confirm(
      `üîê ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô\n\n‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á "${fullName}" ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?\n\n‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô: ${employeeId}\n\n‚ö†Ô∏è ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà`,
    );
    if (confirmed) {
      resetPasswordMutation.mutate(userId);
    }
  };

  const handleDelete = (userId: number) => {
    if (window.confirm("‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ?")) {
      deleteMutation.mutate(userId);
    }
  };

  return (
    <tr
      className={`${index % 2 === 0 ? "bg-white" : "bg-gray-50"} hover:bg-blue-50 transition-colors duration-150`}
    >
      <td className="px-6 py-4 text-sm font-medium text-gray-900">
        {user.employeeId}
      </td>
      <td className="px-6 py-4 text-sm text-gray-900">{user.fullName}</td>
      <td className="px-6 py-4 text-sm text-gray-900">
        {user.workCenter.name}
      </td>
      <td className="px-6 py-4 text-sm text-gray-900">
        {user.branch.fullName}
      </td>
      <td className="px-6 py-4">
        <select
          value={user.role}
          onChange={(e) => handleRoleChange(user.id, e.target.value as Role)}
          className="w-full px-3 py-1 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          disabled={updateRoleMutation.isLoading}
        >
          {Object.entries(ROLE_TRANSLATIONS).map(([role, label]) => (
            <option key={role} value={role}>
              {label}
            </option>
          ))}
        </select>
      </td>
      <td className="px-6 py-4">
        <div className="flex space-x-2">
          <button
            onClick={() =>
              handleResetPassword(user.id, user.employeeId, user.fullName)
            }
            className="bg-orange-500 hover:bg-orange-600 text-white font-bold py-1 px-3 rounded-md transition-colors duration-200 text-sm"
            disabled={resetPasswordMutation.isLoading}
            title={`‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô: ${user.employeeId}`}
          >
            {resetPasswordMutation.isLoading ? "‚è≥" : "üîê ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï"}
          </button>
          <button
            onClick={() => handleDelete(user.id)}
            className="bg-red-500 hover:bg-red-600 text-white font-bold py-1 px-3 rounded-md transition-colors duration-200 text-sm"
            disabled={deleteMutation.isLoading}
          >
            {deleteMutation.isLoading ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö..." : "üóëÔ∏è ‡∏•‡∏ö"}
          </button>
        </div>
      </td>
    </tr>
  );
};

const UserTable = () => {
  const { searchParams } = useUserContext();

  const { data, isLoading, error } = useQuery(
    ["users", searchParams],
    () =>
      getUsers(
        searchParams.page,
        searchParams.limit,
        searchParams.search,
        searchParams.workCenterId,
      ),
    {
      keepPreviousData: true,
      refetchOnWindowFocus: false,
    },
  );

  if (isLoading) return <LoadingSpinner />;
  if (error) return <ErrorMessage message="‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ" />;
  if (!data?.users || data.users.length === 0) {
    return (
      <div className="bg-white rounded-lg shadow-md p-8 text-center">
        <div className="text-gray-400 text-6xl mb-4">üë•</div>
        <p className="text-gray-500 text-lg">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ</p>
      </div>
    );
  }

  return (
    <div className="bg-white rounded-lg shadow-md overflow-hidden">
      <div className="overflow-x-auto">
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-gray-800">
            <tr>
              <th className="px-6 py-3 text-left text-xs font-medium text-white uppercase tracking-wider">
                ‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-white uppercase tracking-wider">
                ‡∏ä‡∏∑‡πà‡∏≠
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-white uppercase tracking-wider">
                ‡∏à‡∏∏‡∏î‡∏£‡∏ß‡∏°‡∏á‡∏≤‡∏ô
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-white uppercase tracking-wider">
                ‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-white uppercase tracking-wider">
                ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-white uppercase tracking-wider">
                ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
              </th>
            </tr>
          </thead>
          <tbody className="divide-y divide-gray-200">
            {data.users.map((user, index) => (
              <UserRow key={user.id} user={user} index={index} />
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

const Pagination = () => {
  const { searchParams, updateSearchParams } = useUserContext();

  const { data } = useQuery(
    ["users", searchParams],
    () =>
      getUsers(
        searchParams.page,
        searchParams.limit,
        searchParams.search,
        searchParams.workCenterId,
      ),
    {
      keepPreviousData: true,
    },
  );

  if (!data || data.totalPages <= 1) return null;

  const currentPage = searchParams.page;
  const totalPages = data.totalPages;

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á
  const getPageNumbers = () => {
    const delta = 2;
    const range = [];
    const rangeWithDots = [];

    for (
      let i = Math.max(2, currentPage - delta);
      i <= Math.min(totalPages - 1, currentPage + delta);
      i++
    ) {
      range.push(i);
    }

    if (currentPage - delta > 2) {
      rangeWithDots.push(1, "...");
    } else {
      rangeWithDots.push(1);
    }

    rangeWithDots.push(...range);

    if (currentPage + delta < totalPages - 1) {
      rangeWithDots.push("...", totalPages);
    } else if (totalPages > 1) {
      rangeWithDots.push(totalPages);
    }

    return rangeWithDots;
  };

  const pageNumbers = getPageNumbers();

  return (
    <div className="mt-6">
      <div className="flex items-center justify-between">
        {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ */}
        <div className="text-sm text-gray-700">
          ‡πÅ‡∏™‡∏î‡∏á{" "}
          <span className="font-medium">
            {(currentPage - 1) * searchParams.limit + 1}
          </span>{" "}
          ‡∏ñ‡∏∂‡∏á{" "}
          <span className="font-medium">
            {Math.min(currentPage * searchParams.limit, data.totalCount)}
          </span>{" "}
          ‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î <span className="font-medium">{data.totalCount}</span>{" "}
          ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
        </div>

        {/* ‡∏õ‡∏∏‡πà‡∏° Pagination */}
        <nav className="flex space-x-1">
          {/* ‡∏õ‡∏∏‡πà‡∏°‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å */}
          <button
            onClick={() => updateSearchParams({ page: 1 })}
            disabled={currentPage === 1}
            className={`px-3 py-2 text-sm font-medium rounded-md transition-colors duration-200 ${
              currentPage === 1
                ? "bg-gray-100 text-gray-400 cursor-not-allowed"
                : "bg-white text-gray-700 border border-gray-300 hover:bg-gray-50"
            }`}
            title="‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å"
          >
            ‚ü™
          </button>

          {/* ‡∏õ‡∏∏‡πà‡∏°‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ */}
          <button
            onClick={() => updateSearchParams({ page: currentPage - 1 })}
            disabled={currentPage === 1}
            className={`px-3 py-2 text-sm font-medium rounded-md transition-colors duration-200 ${
              currentPage === 1
                ? "bg-gray-100 text-gray-400 cursor-not-allowed"
                : "bg-white text-gray-700 border border-gray-300 hover:bg-gray-50"
            }`}
            title="‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤"
          >
            ‚Äπ
          </button>

          {/* ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤ */}
          {pageNumbers.map((pageNumber, index) => (
            <button
              key={index}
              onClick={() => {
                if (typeof pageNumber === "number") {
                  updateSearchParams({ page: pageNumber });
                }
              }}
              disabled={pageNumber === "..."}
              className={`px-4 py-2 text-sm font-medium rounded-md transition-colors duration-200 ${
                pageNumber === currentPage
                  ? "bg-blue-600 text-white border border-blue-600"
                  : pageNumber === "..."
                    ? "bg-white text-gray-400 cursor-default"
                    : "bg-white text-gray-700 border border-gray-300 hover:bg-gray-50"
              }`}
            >
              {pageNumber}
            </button>
          ))}

          {/* ‡∏õ‡∏∏‡πà‡∏°‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ */}
          <button
            onClick={() => updateSearchParams({ page: currentPage + 1 })}
            disabled={currentPage === totalPages}
            className={`px-3 py-2 text-sm font-medium rounded-md transition-colors duration-200 ${
              currentPage === totalPages
                ? "bg-gray-100 text-gray-400 cursor-not-allowed"
                : "bg-white text-gray-700 border border-gray-300 hover:bg-gray-50"
            }`}
            title="‡∏´‡∏ô‡πâ‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ"
          >
            ‚Ä∫
          </button>

          {/* ‡∏õ‡∏∏‡πà‡∏°‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ */}
          <button
            onClick={() => updateSearchParams({ page: totalPages })}
            disabled={currentPage === totalPages}
            className={`px-3 py-2 text-sm font-medium rounded-md transition-colors duration-200 ${
              currentPage === totalPages
                ? "bg-gray-100 text-gray-400 cursor-not-allowed"
                : "bg-white text-gray-700 border border-gray-300 hover:bg-gray-50"
            }`}
            title="‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢"
          >
            ‚ü´
          </button>
        </nav>
      </div>
    </div>
  );
};

// Transformer Form Component
const TransformerForm = ({
  transformer,
  onSubmit,
  onCancel,
}: {
  transformer?: Transformer;
  onSubmit: (data: { transformerNumber: string; gisDetails: string }) => void;
  onCancel: () => void;
}) => {
  const [formData, setFormData] = useState({
    transformerNumber: transformer?.transformerNumber || "",
    gisDetails: transformer?.gisDetails || "",
  });

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (formData.transformerNumber.trim() && formData.gisDetails.trim()) {
      onSubmit(formData);
    }
  };

  return (
    <div className="bg-white rounded-lg shadow-md p-6 mb-6">
      <h3 className="text-lg font-bold text-gray-800 mb-4">
        {transformer ? "‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡πâ‡∏≠‡πÅ‡∏õ‡∏•‡∏á" : "‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡πâ‡∏≠‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏´‡∏°‡πà"}
      </h3>

      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡∏°‡πâ‡∏≠‡πÅ‡∏õ‡∏•‡∏á *
          </label>
          <input
            type="text"
            value={formData.transformerNumber}
            onChange={(e) =>
              setFormData((prev) => ({
                ...prev,
                transformerNumber: e.target.value,
              }))
            }
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            placeholder="‡πÄ‡∏ä‡πà‡∏ô TR001"
            required
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î GIS *
          </label>
          <textarea
            value={formData.gisDetails}
            onChange={(e) =>
              setFormData((prev) => ({ ...prev, gisDetails: e.target.value }))
            }
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î GIS ‡∏Ç‡∏≠‡∏á‡∏´‡∏°‡πâ‡∏≠‡πÅ‡∏õ‡∏•‡∏á"
            rows={3}
            required
          />
        </div>

        <div className="flex space-x-4">
          <button
            type="submit"
            className="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-md transition-colors duration-200"
          >
            {transformer ? "üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç" : "‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡πâ‡∏≠‡πÅ‡∏õ‡∏•‡∏á"}
          </button>
          <button
            type="button"
            onClick={onCancel}
            className="bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded-md transition-colors duration-200"
          >
            ‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
          </button>
        </div>
      </form>
    </div>
  );
};

// Main Content Component
const MainContent = () => {
  const { activeTab } = useUserContext();

  switch (activeTab) {
    case "transformers":
      return <TransformerManagement />;
    case "users":
      return (
        <div>
          <h2 className="text-2xl font-bold text-gray-800 mb-6">
            üë• ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
          </h2>
          <SearchBar />
          <UserTable />
          <Pagination />
        </div>
      );
    case "export":
      return <ExportDataComponent />;
    default:
      return <TransformerManagement />;
  }
};

// ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤
function UserPageContent() {
  const initialSearchParams: UserSearchParams = {
    page: 1,
    limit: USERS_PER_PAGE,
    search: "",
  };

  return (
    <UserProvider initialParams={initialSearchParams}>
      <div className="min-h-screen bg-gray-100">
        <div className="bg-white shadow-sm">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div className="py-6">
              <h1 className="text-3xl font-bold text-gray-900">
                ‚öôÔ∏è Admin Panel
              </h1>
              <p className="mt-2 text-sm text-gray-600">
                ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
              </p>
            </div>
          </div>
        </div>

        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <NavigationTabs />
          <MainContent />
        </div>
      </div>
    </UserProvider>
  );
}

// ‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå‡∏´‡∏•‡∏±‡∏Å‡∏û‡∏£‡πâ‡∏≠‡∏° React Query
export default function UserPage() {
  const queryClient = new QueryClient({
    defaultOptions: {
      queries: {
        refetchOnWindowFocus: false,
        retry: 1,
        staleTime: 30000,
      },
    },
  });

  return (
    <QueryClientProvider client={queryClient}>
      <UserPageContent />
    </QueryClientProvider>
  );
}
