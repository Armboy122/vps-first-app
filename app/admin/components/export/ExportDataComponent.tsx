import { useState } from "react";
import { useQuery } from "@tanstack/react-query";
import { getWorkCenters } from "@/app/api/action/getWorkCentersAndBranches";
import { getPowerOutageRequests } from "@/app/api/action/powerOutageRequest";
import { WorkCenter, ExportOptions } from "../../types/admin.types";
import { LoadingSpinner } from "../shared/LoadingSpinner";
import { generateCSVContent } from "../../utils/csvParser";

export function ExportDataComponent() {
  const [exportOptions, setExportOptions] = useState<ExportOptions>({
    workCenterId: "",
    dateFrom: "",
    dateTo: "",
    format: "csv",
  });
  const [isExporting, setIsExporting] = useState(false);

  // Fetch work centers for filter
  const { data: workCenters = [] } = useQuery({
    queryKey: ["workCenters"],
    queryFn: getWorkCenters,
    staleTime: 10 * 60 * 1000,
  });

  // Handle input change
  const handleInputChange = (field: keyof ExportOptions, value: string) => {
    setExportOptions((prev) => ({ ...prev, [field]: value }));
  };

  // Format time to HH:MM
  const formatTime = (timeString: string | Date): string => {
    try {
      const date = new Date(timeString);
      return date.toLocaleTimeString("th-TH", {
        hour: "2-digit",
        minute: "2-digit",
        hour12: false,
      });
    } catch (error) {
      return timeString.toString();
    }
  };

  // Export data
  const handleExport = async () => {
    setIsExporting(true);

    try {
      // Prepare filter parameters
      const filters: any = {};

      if (exportOptions.workCenterId) {
        filters.workCenterId = parseInt(exportOptions.workCenterId);
      }

      if (exportOptions.dateFrom) {
        filters.dateFrom = exportOptions.dateFrom;
      }

      if (exportOptions.dateTo) {
        filters.dateTo = exportOptions.dateTo;
      }

      // Fetch power outage requests
      const response = await getPowerOutageRequests(1, 10000, filters);

      if (!response.data || response.data.length === 0) {
        alert("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å");
        return;
      }

      // Prepare data for export
      const exportData = response.data.map((request: any) => ({
        ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏ï‡∏±‡∏î‡πÑ‡∏ü: new Date(request.outageDate).toLocaleDateString("th-TH"),
        ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°: formatTime(request.startTime),
        ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î: formatTime(request.endTime),
        ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡∏°‡πâ‡∏≠‡πÅ‡∏õ‡∏•‡∏á: request.transformerNumber,
        "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î GIS": request.gisDetails,
        ‡∏à‡∏∏‡∏î‡∏£‡∏ß‡∏°‡∏á‡∏≤‡∏ô: request.workCenter.name,
        ‡∏™‡∏≤‡∏Ç‡∏≤: request.branch.shortName,
        ‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡πà‡∏ô‡∏Ñ‡∏≥‡∏Ç‡∏≠: request.createdBy.fullName,
        ‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô: request.createdBy.employeeId || "-",
        ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏Ç‡∏≠OMS: request.omsStatus === "NOT_ADDED" ? "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏ö" : request.omsStatus === "PROCESSED" ? "‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß" : "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
        ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠: new Date(request.createdAt).toLocaleDateString("th-TH"),
      }));

      console.log("exportData", exportData);

      // Generate CSV content
      const headers = [
        "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏ï‡∏±‡∏î‡πÑ‡∏ü",
        "‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°",
        "‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î",
        "‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡∏°‡πâ‡∏≠‡πÅ‡∏õ‡∏•‡∏á",
        "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î GIS",
        "‡∏à‡∏∏‡∏î‡∏£‡∏ß‡∏°‡∏á‡∏≤‡∏ô",
        "‡∏™‡∏≤‡∏Ç‡∏≤",
        "‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡πà‡∏ô‡∏Ñ‡∏≥‡∏Ç‡∏≠",
        "‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô",
        "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏Ç‡∏≠OMS",
        "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠",
      ];

      const csvContent = generateCSVContent(exportData, headers);

      // Create and download file
      const blob = new Blob(["\uFEFF" + csvContent], {
        type: "text/csv;charset=utf-8;",
      });

      const link = document.createElement("a");
      const url = URL.createObjectURL(blob);
      link.setAttribute("href", url);

      // Generate filename
      const dateStr = new Date().toISOString().split("T")[0];
      const workCenterName = exportOptions.workCenterId
        ? workCenters.find(
            (wc) => wc.id.toString() === exportOptions.workCenterId
          )?.name || "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"
        : "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î";

      link.setAttribute(
        "download",
        `‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ï‡∏±‡∏î‡πÑ‡∏ü_${workCenterName}_${dateStr}.csv`
      );
      link.style.visibility = "hidden";
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);

      alert(`‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! (${exportData.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)`);
    } catch (error) {
      console.error("Export error:", error);
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
    } finally {
      setIsExporting(false);
    }
  };

  return (
    <div className="space-y-6">
      {/* Page Header */}
      <div>
        <h2 className="text-2xl font-bold text-gray-900">‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</h2>
        <p className="text-gray-600 mt-1">
          ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ï‡∏±‡∏î‡πÑ‡∏ü‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV ‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
        </p>
      </div>

      {/* Export Form */}
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">
          üì§ ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å
        </h3>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {/* Work Center Filter */}
          <div>
            <label
              htmlFor="workCenter"
              className="block text-sm font-medium text-gray-700 mb-2"
            >
              ‡∏à‡∏∏‡∏î‡∏£‡∏ß‡∏°‡∏á‡∏≤‡∏ô
            </label>
            <select
              id="workCenter"
              value={exportOptions.workCenterId}
              onChange={(e) =>
                handleInputChange("workCenterId", e.target.value)
              }
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              <option value="">‡∏ó‡∏∏‡∏Å‡∏à‡∏∏‡∏î‡∏£‡∏ß‡∏°‡∏á‡∏≤‡∏ô</option>
              {workCenters.map((wc: WorkCenter) => (
                <option key={wc.id} value={wc.id.toString()}>
                  {wc.name}
                </option>
              ))}
            </select>
          </div>

          {/* Date From */}
          <div>
            <label
              htmlFor="dateFrom"
              className="block text-sm font-medium text-gray-700 mb-2"
            >
              ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
            </label>
            <input
              id="dateFrom"
              type="date"
              value={exportOptions.dateFrom}
              onChange={(e) => handleInputChange("dateFrom", e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>

          {/* Date To */}
          <div>
            <label
              htmlFor="dateTo"
              className="block text-sm font-medium text-gray-700 mb-2"
            >
              ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î
            </label>
            <input
              id="dateTo"
              type="date"
              value={exportOptions.dateTo}
              onChange={(e) => handleInputChange("dateTo", e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>

          {/* Format */}
          <div>
            <label
              htmlFor="format"
              className="block text-sm font-medium text-gray-700 mb-2"
            >
              ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ü‡∏•‡πå
            </label>
            <select
              id="format"
              value={exportOptions.format}
              onChange={(e) =>
                handleInputChange("format", e.target.value as "csv" | "xlsx")
              }
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              <option value="csv">CSV (.csv)</option>
              <option value="xlsx" disabled>
                Excel (.xlsx) - ‡πÄ‡∏£‡πá‡∏ß‡πÜ‡∏ô‡∏µ‡πâ
              </option>
            </select>
          </div>
        </div>

        {/* Export Button */}
        <div className="mt-6 flex justify-end">
          <button
            onClick={handleExport}
            disabled={isExporting}
            className="px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
          >
            {isExporting ? (
              <div className="flex items-center">
                <LoadingSpinner size="sm" text="" className="mr-2" />
                ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å...
              </div>
            ) : (
              "üì§ ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
            )}
          </button>
        </div>

        {/* Info */}
        <div className="mt-4 p-3 bg-blue-50 border border-blue-200 rounded-lg">
          <h4 className="text-blue-800 text-sm font-medium mb-1">
            ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å:
          </h4>
          <ul className="text-blue-700 text-xs space-y-1">
            <li>‚Ä¢ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏ï‡∏±‡∏î‡πÑ‡∏ü</li>
            <li>‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡πâ‡∏≠‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡∏∞ GIS</li>
            <li>‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡πà‡∏ô‡∏Ñ‡∏≥‡∏Ç‡∏≠</li>
            <li>‚Ä¢ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠</li>
            <li>‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∏‡∏î‡∏£‡∏ß‡∏°‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏Ç‡∏≤</li>
          </ul>
        </div>
      </div>
    </div>
  );
}
