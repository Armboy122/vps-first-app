#!/bin/bash

# Production Build Script
# ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö build ‡πÅ‡∏•‡∏∞ deploy ‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏ö‡∏ô production

set -e  # Exit on any error

echo "üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Production Build Process..."

# ‡∏™‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£
DOCKER_IMAGE_NAME="armboy/vps-first-app"
DOCKER_TAG=$(date +%d%m%y)
BUILD_CONTEXT="."

# ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö rollback
BACKUP_COMPOSE="docker-compose.yml.backup"
CURRENT_IMAGE=""

echo -e "${BLUE}üìã ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Build:${NC}"
echo "  - Image Name: $DOCKER_IMAGE_NAME"
echo "  - Tag: $DOCKER_TAG"
echo "  - Build Context: $BUILD_CONTEXT"
echo ""

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
show_status() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

show_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

show_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

show_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Docker ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
if ! docker info >/dev/null 2>&1; then
    show_error "Docker ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Docker Desktop"
    exit 1
fi

show_success "Docker ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô rollback
rollback_on_failure() {
    show_error "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô: $1"
    echo ""
    
    show_status "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥ rollback..."
    
    # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ docker-compose.yml ‡πÄ‡∏î‡∏¥‡∏°
    if [ -f "$BACKUP_COMPOSE" ]; then
        mv "$BACKUP_COMPOSE" docker-compose.yml
        show_success "‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ docker-compose.yml ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß"
    fi
    
    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô services ‡∏î‡πâ‡∏ß‡∏¢ image ‡πÄ‡∏î‡∏¥‡∏° (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    if [ ! -z "$CURRENT_IMAGE" ]; then
        show_status "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô services ‡∏î‡πâ‡∏ß‡∏¢ image ‡πÄ‡∏î‡∏¥‡∏°..."
        if docker-compose up -d; then
            show_success "Rollback ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏ä‡πâ image ‡πÄ‡∏î‡∏¥‡∏°: $CURRENT_IMAGE"
        else
            show_error "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ rollback ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö manually"
        fi
    else
        show_warning "‡πÑ‡∏°‡πà‡∏û‡∏ö image ‡πÄ‡∏î‡∏¥‡∏° ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ rollback ‡πÑ‡∏î‡πâ"
    fi
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
    echo ""
    echo -e "${YELLOW}üîß ‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤:${NC}"
    echo "  1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö logs: docker-compose logs -f"
    echo "  2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Dockerfile syntax"
    echo "  3. ‡πÄ‡∏ä‡πá‡∏Ñ disk space: df -h ‡πÅ‡∏•‡∏∞ docker system df"
    echo "  4. ‡∏•‡∏≠‡∏á build manual: docker build -t test ."
    echo "  5. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö network: ping docker.io"
    echo ""
    
    exit 1
}

# Trap error ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥ rollback
trap 'rollback_on_failure "Unexpected error"' ERR

# 1. ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡∏¢‡∏∞ Docker ‡∏Å‡πà‡∏≠‡∏ô (‡πÄ‡∏Å‡πá‡∏ö build cache ‡πÅ‡∏•‡∏∞ volumes)
show_status "‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡∏¢‡∏∞ Docker (‡πÄ‡∏Å‡πá‡∏ö build cache ‡πÅ‡∏•‡∏∞ volumes)..."
DISK_BEFORE=$(docker system df --format "table {{.Type}}\t{{.TotalCount}}\t{{.Size}}")
echo -e "${BLUE}üìä ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà Docker ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå:${NC}"
echo "$DISK_BEFORE"
echo ""

# ‡∏•‡πâ‡∏≤‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ unused containers, networks, images (‡πÄ‡∏Å‡πá‡∏ö build cache ‡πÅ‡∏•‡∏∞ volumes)
docker system prune -f
show_success "‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡∏¢‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß (‡πÄ‡∏Å‡πá‡∏ö build cache ‡πÅ‡∏•‡∏∞ volumes ‡πÑ‡∏ß‡πâ)"

# 2. ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö rollback
show_status "‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö rollback..."

# ‡πÄ‡∏Å‡πá‡∏ö image ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
CURRENT_IMAGE=$(grep "image: $DOCKER_IMAGE_NAME" docker-compose.yml | head -1 | sed 's/.*image: //' | tr -d ' ')
if [ ! -z "$CURRENT_IMAGE" ]; then
    show_success "‡πÄ‡∏Å‡πá‡∏ö image ‡πÄ‡∏î‡∏¥‡∏°: $CURRENT_IMAGE"
else
    show_warning "‡πÑ‡∏°‡πà‡∏û‡∏ö image ‡πÄ‡∏î‡∏¥‡∏°‡πÉ‡∏ô docker-compose.yml"
fi

# ‡∏™‡∏≥‡∏£‡∏≠‡∏á docker-compose.yml
cp docker-compose.yml "$BACKUP_COMPOSE"
show_success "‡∏™‡∏≥‡∏£‡∏≠‡∏á docker-compose.yml ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß"

# 3. ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á containers ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
show_status "‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Docker containers..."
if docker-compose down --remove-orphans; then
    show_success "‡∏´‡∏¢‡∏∏‡∏î containers ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß"
else
    show_warning "‡πÑ‡∏°‡πà‡∏°‡∏µ containers ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"
fi

# 4. Build Docker image ‡πÉ‡∏´‡∏°‡πà (‡πÉ‡∏ä‡πâ build cache ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß)
show_status "‡πÄ‡∏£‡∏¥‡πà‡∏° build Docker image ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö production..."
echo -e "${YELLOW}‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á build... (‡πÉ‡∏ä‡πâ cache ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß)${NC}"

# Pre-build validation
show_status "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Å‡πà‡∏≠‡∏ô build..."

if [ ! -f "Dockerfile" ]; then
    rollback_on_failure "‡πÑ‡∏°‡πà‡∏û‡∏ö Dockerfile"
fi

if [ ! -f "package.json" ]; then
    rollback_on_failure "‡πÑ‡∏°‡πà‡∏û‡∏ö package.json"
fi

# Check disk space
DISK_USAGE=$(df / | tail -1 | awk '{print $5}' | sed 's/%//')
if [ "$DISK_USAGE" -gt 85 ]; then
    show_warning "‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà disk ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ô‡πâ‡∏≠‡∏¢ ($DISK_USAGE%)"
    echo "‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? (y/N):"
    read -r REPLY
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        rollback_on_failure "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà disk ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ô‡πâ‡∏≠‡∏¢"
    fi
fi

show_success "‡πÑ‡∏ü‡∏•‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö build"

# Build with error handling
if ! docker build \
    --platform linux/amd64 \
    -t "$DOCKER_IMAGE_NAME:$DOCKER_TAG" \
    -t "$DOCKER_IMAGE_NAME:latest" \
    --build-arg NODE_ENV=production \
    "$BUILD_CONTEXT"; then
    rollback_on_failure "Docker build ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß"
fi

show_success "Build ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! Image: $DOCKER_IMAGE_NAME:$DOCKER_TAG"

# 4. ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á image
IMAGE_SIZE=$(docker images "$DOCKER_IMAGE_NAME:$DOCKER_TAG" --format "table {{.Size}}" | tail -n 1)
echo -e "${BLUE}üìä ‡∏Ç‡∏ô‡∏≤‡∏î Docker Image: $IMAGE_SIZE${NC}"

# 5. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö image ‡∏ó‡∏µ‡πà build ‡πÅ‡∏•‡πâ‡∏ß
show_status "‡∏ó‡∏î‡∏™‡∏≠‡∏ö Docker image..."
if docker run --rm "$DOCKER_IMAGE_NAME:$DOCKER_TAG" node --version >/dev/null 2>&1; then
    show_success "Image ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏õ‡∏Å‡∏ï‡∏¥"
else
    show_error "Image ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤!"
    exit 1
fi

# 6. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï docker-compose.yml ‡∏î‡πâ‡∏ß‡∏¢ tag ‡πÉ‡∏´‡∏°‡πà
show_status "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï docker-compose.yml..."
sed -i.bak "s|image: $DOCKER_IMAGE_NAME:.*|image: $DOCKER_IMAGE_NAME:$DOCKER_TAG|g" docker-compose.yml
show_success "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï docker-compose.yml ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß"

# 7. ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô services ‡πÉ‡∏´‡∏°‡πà
show_status "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô production services..."
if ! docker-compose up -d; then
    rollback_on_failure "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô services ‡πÑ‡∏î‡πâ"
fi

show_success "Services ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß"

# 8. ‡∏£‡∏≠‡πÉ‡∏´‡πâ services ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
show_status "‡∏£‡∏≠‡πÉ‡∏´‡πâ services ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô..."
echo -e "${YELLOW}‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö health check...${NC}"

# ‡∏£‡∏≠‡πÉ‡∏´‡πâ database ‡∏û‡∏£‡πâ‡∏≠‡∏°
timeout=60
counter=0
while [ $counter -lt $timeout ]; do
    if docker-compose ps db | grep -q "healthy"; then
        show_success "Database ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"
        break
    fi
    sleep 2
    counter=$((counter + 2))
    echo -n "."
done

if [ $counter -ge $timeout ]; then
    rollback_on_failure "Database ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"
fi

# ‡∏£‡∏≠‡πÉ‡∏´‡πâ Next.js app ‡∏û‡∏£‡πâ‡∏≠‡∏°
timeout=120
counter=0
while [ $counter -lt $timeout ]; do
    if curl -f http://localhost:3000 >/dev/null 2>&1; then
        show_success "Next.js App ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"
        break
    fi
    sleep 3
    counter=$((counter + 3))
    echo -n "."
done

if [ $counter -ge $timeout ]; then
    rollback_on_failure "Next.js App ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"  
fi

# 9. ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
echo ""
echo -e "${GREEN}üéâ Production Build ‡πÅ‡∏•‡∏∞ Deploy ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!${NC}"
echo ""
echo -e "${BLUE}üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:${NC}"
echo "  ‚Ä¢ Docker Image: $DOCKER_IMAGE_NAME:$DOCKER_TAG"
echo "  ‚Ä¢ Image Size: $IMAGE_SIZE"
echo "  ‚Ä¢ Next.js App: http://localhost:3000"
echo "  ‚Ä¢ Metabase: http://localhost:3001"
echo "  ‚Ä¢ Database: localhost:5432"
echo ""

# 10. ‡πÅ‡∏™‡∏î‡∏á containers ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
echo -e "${BLUE}üê≥ Docker Containers Status:${NC}"
docker-compose ps

echo ""
echo -e "${GREEN}‚ú® Deploy ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô! ‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß${NC}"

# 11. ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ push image ‡πÑ‡∏õ‡∏¢‡∏±‡∏á registry
echo ""
read -p "‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ push image ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Docker Hub ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    show_status "‡∏Å‡∏≥‡∏•‡∏±‡∏á push image ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Docker Hub..."
    if docker push "$DOCKER_IMAGE_NAME:$DOCKER_TAG" && docker push "$DOCKER_IMAGE_NAME:latest"; then
        show_success "Push ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!"
    else
        show_error "Push ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß! ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö Docker Hub"
    fi
fi

# 12. ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏£‡∏∞‡∏ö‡∏ö Docker ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° (‡πÄ‡∏Å‡πá‡∏ö build cache ‡πÑ‡∏ß‡πâ)
echo ""
read -p "‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà Docker ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    show_status "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà Docker ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°..."
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏±‡∏á deploy
    DISK_AFTER_DEPLOY=$(docker system df --format "table {{.Type}}\t{{.TotalCount}}\t{{.Size}}")
    echo -e "${BLUE}üìä ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà Docker ‡∏´‡∏•‡∏±‡∏á deploy:${NC}"
    echo "$DISK_AFTER_DEPLOY"
    echo ""
    
    # ‡∏•‡πâ‡∏≤‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏¢‡∏∞ (‡πÄ‡∏Å‡πá‡∏ö build cache ‡πÅ‡∏•‡∏∞ volumes ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô)
    if docker system prune -f; then
        show_success "‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß"
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
        DISK_FINAL=$(docker system df --format "table {{.Type}}\t{{.TotalCount}}\t{{.Size}}")
        echo -e "${BLUE}üìä ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà Docker ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢:${NC}"
        echo "$DISK_FINAL"
        echo ""
        
        show_success "‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡πÄ‡∏Å‡πá‡∏ö build cache ‡πÑ‡∏ß‡πâ)"
    else
        show_warning "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏î‡πâ"
    fi
else
    show_status "‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° - ‡πÄ‡∏Å‡πá‡∏ö cache ‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ"
fi

# ‡∏•‡πâ‡∏≤‡∏á backup files
rm -f "$BACKUP_COMPOSE"

echo ""
echo -e "${BLUE}üîß ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:${NC}"
echo "  ‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö logs: docker-compose logs -f"
echo "  ‚Ä¢ ‡∏´‡∏¢‡∏∏‡∏î services: docker-compose down"
echo "  ‚Ä¢ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà: docker-compose up -d"
echo "  ‚Ä¢ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà Docker: docker system df"
echo "  ‚Ä¢ ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà: docker system prune -af"
echo "  ‚Ä¢ ‡∏î‡∏π image ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: docker images"
echo "  ‚Ä¢ ‡∏•‡∏ö image ‡πÄ‡∏Å‡πà‡∏≤: docker rmi <image_name>"
echo "" 