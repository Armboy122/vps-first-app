"use client";
import React from "react";
import { Controller, Control, FieldError } from "react-hook-form";
import { TimePicker } from "@mantine/dates";

interface MantineTimePickerProps {
  name: string;
  control: Control<any>;
  label?: string;
  error?: FieldError;
  disabled?: boolean;
  minTime?: string;
  maxTime?: string;
}

export const MantineTimePicker: React.FC<MantineTimePickerProps> = ({
  name,
  control,
  label,
  error,
  disabled = false,
  minTime,
  maxTime,
}) => {
  return (
    <Controller
      name={name}
      control={control}
      render={({ field: { onChange, value } }) => {
        const handleTimeChange = (timeValue: string) => {
          console.log("TimePicker raw value:", timeValue);
          
          if (timeValue) {
            // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö validation regex: /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/
            let formattedTime = timeValue;
            
            // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö HH:MM:SS ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏î‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏≠‡∏≠‡∏Å
            if (timeValue.includes(':') && timeValue.split(':').length > 2) {
              const timeParts = timeValue.split(':');
              formattedTime = `${timeParts[0]}:${timeParts[1]}`;
            }
            
            // ‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å zero-padded ‡πÄ‡∏õ‡πá‡∏ô single digit hour ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
            const timeParts = formattedTime.split(':');
            if (timeParts.length === 2) {
              let hour = parseInt(timeParts[0]);
              let minute = timeParts[1];
              
              // ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô H:MM format (single digit hour ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô 0-9)
              formattedTime = `${hour}:${minute}`;
            }
            
            console.log("Formatted time for validation:", formattedTime);
            onChange(formattedTime);
          } else {
            onChange(timeValue);
          }
        };

        return (
          <div className="space-y-1">
            <TimePicker
              label={label}
              value={value || ""}
              onChange={handleTimeChange}
              disabled={disabled}
              error={error?.message}
              size="md"
              withSeconds={false}
              withDropdown={true}
              clearable
              hoursStep={1}
              minutesStep={1}
              min={minTime}
              max={maxTime}
              styles={{
                input: {
                  fontSize: '16px', // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô zoom ‡πÉ‡∏ô iOS
                  borderRadius: '8px',
                  transition: 'border-color 0.2s',
                  cursor: 'pointer',
                },
                label: {
                  fontWeight: 500,
                  color: '#374151',
                  marginBottom: '4px',
                },
              }}
            />
            
            {/* Helper text */}
            <div className="text-xs text-gray-500">
              {minTime && maxTime && (
                <span>‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï: {minTime} - {maxTime} ‡∏ô.</span>
              )}
              <div className="mt-1 text-blue-600">
                üí° ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏î‡∏£‡∏≠‡∏õ‡∏î‡∏≤‡∏ß‡∏ô‡πå (‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ)
              </div>
            </div>
          </div>
        );
      }}
    />
  );
};