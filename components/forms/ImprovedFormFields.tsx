"use client";
import React from "react";
import {
  Control,
  FieldErrors,
  UseFormRegister,
  Controller,
} from "react-hook-form";
import { PowerOutageRequestInput } from "@/lib/validations/powerOutageRequest";
import {
  FormField,
  FormInput,
  FormSelect,
} from "@/components/forms";
import { MantineTimePicker } from "./MantineTimePicker";
import { 
  Paper, 
  Group, 
  Stack, 
  Title, 
  Text, 
  Divider,
  Grid,
  Badge,
  Alert,
  Autocomplete,
  Loader
} from "@mantine/core";
import { DateInput } from "@mantine/dates";
import dayjs from "dayjs";

interface WorkCenter {
  id: number;
  name: string;
}

interface Branch {
  id: number;
  shortName: string;
  workCenterId: number;
}

interface Transformer {
  transformerNumber: string;
  gisDetails: string;
}

interface ImprovedFormFieldsProps {
  register: UseFormRegister<PowerOutageRequestInput>;
  control: Control<PowerOutageRequestInput>;
  errors: FieldErrors<PowerOutageRequestInput>;
  role: string;
  workCenters?: WorkCenter[];
  branches: Branch[];
  transformers: Transformer[];
  watchWorkCenterId: string;
  minSelectableDate: string;
  watchedOutageDate: string;
  daysFromToday: number | null;
  timeError: string | null;
  branchesLoading?: boolean;
  watchedStartTime?: string;
  watchedEndTime?: string;
  onDateChange: (event: React.ChangeEvent<HTMLInputElement>) => void;
  onTransformerSearch: (searchTerm: string) => void;
  onTransformerSelect: (transformer: Transformer) => void;
}

export const ImprovedFormFields: React.FC<ImprovedFormFieldsProps> = ({
  register,
  control,
  errors,
  role,
  workCenters,
  branches,
  transformers,
  watchWorkCenterId,
  minSelectableDate,
  watchedOutageDate,
  daysFromToday,
  timeError,
  branchesLoading,
  watchedStartTime,
  watchedEndTime,
  onDateChange,
  onTransformerSearch,
  onTransformerSelect,
}) => {
  const workCenterOptions =
    workCenters?.map((wc) => ({ value: wc.id.toString(), label: wc.name })) || [];
  const branchOptions = branches.map((branch) => ({
    value: branch.id.toString(),
    label: branch.shortName,
  }));

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á autocomplete data ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö transformer
  const transformerData = transformers.map(t => ({
    value: t.transformerNumber,
    label: `${t.transformerNumber} - ${t.gisDetails}`
  }));

  return (
    <Stack gap="xl">
      {/* ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ */}
      <Paper shadow="xs" p="md" radius="md">
        <Group mb="md">
          <div>
            <Title order={4} c="blue">üìÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤</Title>
            <Text size="sm" c="dimmed">‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏±‡∏ö‡πÑ‡∏ü</Text>
          </div>
          {daysFromToday !== null && (
            <Badge
              color={daysFromToday > 10 ? "green" : "red"}
              size="lg"
              variant="light"
            >
              {daysFromToday > 10 ? `‚úÖ ${daysFromToday} ‡∏ß‡∏±‡∏ô` : `‚ùå ${daysFromToday} ‡∏ß‡∏±‡∏ô`}
            </Badge>
          )}
        </Group>

        <Grid>
          {/* ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏±‡∏ö‡πÑ‡∏ü */}
          <Grid.Col span={{ base: 12, md: 4 }}>
            <Controller
              name="outageDate"
              control={control}
              render={({ field }) => (
                <DateInput
                  label="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏±‡∏ö‡πÑ‡∏ü"
                  placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"
                  value={field.value ? dayjs(field.value).toDate() : null}
                  onChange={(date) => {
                    if (date) {
                      const dateString = dayjs(date).format("YYYY-MM-DD");
                      field.onChange(dateString);
                      // Trigger onDateChange for validation
                      onDateChange({ target: { value: dateString } } as any);
                    }
                  }}
                  minDate={dayjs(minSelectableDate).toDate()}
                  error={errors.outageDate?.message}
                  size="md"
                  withAsterisk
                  styles={{
                    input: {
                      fontSize: '16px',
                    }
                  }}
                />
              )}
            />
            <Text size="xs" c="dimmed" mt={4}>
              ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î: {dayjs(minSelectableDate).format("DD/MM/YYYY")}
            </Text>
          </Grid.Col>

          {/* ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô */}
          <Grid.Col span={{ base: 12, md: 4 }}>
            <MantineTimePicker
              name="startTime"
              control={control}
              label="‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô *"
              error={errors.startTime}
              minTime="06:00"
              maxTime="19:30"
              placeholder="08:00"
            />
          </Grid.Col>

          {/* ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î */}
          <Grid.Col span={{ base: 12, md: 4 }}>
            <MantineTimePicker
              name="endTime"
              control={control}
              label="‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î *"
              error={errors.endTime}
              minTime={watchedStartTime || "06:30"}
              maxTime="20:00"
              placeholder="12:00"
            />
            {watchedStartTime && watchedEndTime && watchedEndTime <= watchedStartTime && (
              <Alert color="red" mt={4}>
                ‚ö†Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 30 ‡∏ô‡∏≤‡∏ó‡∏µ
              </Alert>
            )}
          </Grid.Col>
        </Grid>
      </Paper>

      {/* ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà */}
      <Paper shadow="xs" p="md" radius="md">
        <Group mb="md">
          <div>
            <Title order={4} c="orange">üè¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà</Title>
            <Text size="sm" c="dimmed">‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏±‡∏ö‡πÑ‡∏ü</Text>
          </div>
        </Group>

        <Grid>
          {/* ‡∏à‡∏∏‡∏î‡∏£‡∏ß‡∏°‡∏á‡∏≤‡∏ô (Admin only) */}
          {role === "ADMIN" && (
            <Grid.Col span={{ base: 12, md: 6 }}>
              <Controller
                name="workCenterId"
                control={control}
                render={({ field }) => (
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      ‡∏à‡∏∏‡∏î‡∏£‡∏ß‡∏°‡∏á‡∏≤‡∏ô *
                    </label>
                    <FormSelect
                      {...field}
                      options={workCenterOptions}
                      placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏∏‡∏î‡∏£‡∏ß‡∏°‡∏á‡∏≤‡∏ô"
                      error={errors.workCenterId}
                      onChange={(e) => field.onChange(e.target.value)}
                    />
                  </div>
                )}
              />
              <Text size="xs" c="dimmed" mt={4}>
                ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏∏‡∏î‡∏£‡∏ß‡∏°‡∏á‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≤‡∏Ç‡∏≤
              </Text>
            </Grid.Col>
          )}

          {/* ‡∏™‡∏≤‡∏Ç‡∏≤ (Admin only) */}
          {role === "ADMIN" && (
            <Grid.Col span={{ base: 12, md: 6 }}>
              <Controller
                name="branchId"
                control={control}
                render={({ field }) => (
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      ‡∏™‡∏≤‡∏Ç‡∏≤ *
                    </label>
                    <FormSelect
                      {...field}
                      options={branchOptions}
                      placeholder={
                        !watchWorkCenterId
                          ? "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏∏‡∏î‡∏£‡∏ß‡∏°‡∏á‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô"
                          : branchesLoading
                            ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≤‡∏Ç‡∏≤..."
                            : "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤"
                      }
                      error={errors.branchId}
                      disabled={!watchWorkCenterId || branchesLoading}
                      onChange={(e) => field.onChange(e.target.value)}
                    />
                    {branchesLoading && <Loader size="xs" />}
                  </div>
                )}
              />
            </Grid.Col>
          )}

          {/* ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡∏°‡πâ‡∏≠‡πÅ‡∏õ‡∏•‡∏á */}
          <Grid.Col span={{ base: 12, md: 6 }}>
            <Controller
              name="transformerNumber"
              control={control}
              render={({ field }) => (
                <Autocomplete
                  label="‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡∏°‡πâ‡∏≠‡πÅ‡∏õ‡∏•‡∏á"
                  placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡∏°‡πâ‡∏≠‡πÅ‡∏õ‡∏•‡∏á"
                  data={transformerData}
                  value={field.value || ""}
                  onChange={(value) => {
                    field.onChange(value);
                    onTransformerSearch(value);
                  }}
                  onOptionSubmit={(value) => {
                    const transformer = transformers.find(t => t.transformerNumber === value);
                    if (transformer) {
                      onTransformerSelect(transformer);
                    }
                  }}
                  error={errors.transformerNumber?.message}
                  withAsterisk
                  size="md"
                  maxDropdownHeight={200}
                  styles={{
                    input: {
                      fontSize: '16px',
                    }
                  }}
                />
              )}
            />
          </Grid.Col>

          {/* ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á (GIS) */}
          <Grid.Col span={{ base: 12, md: 6 }}>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á (GIS)
              </label>
              <FormInput
                {...register("gisDetails")}
                readOnly
                placeholder="‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"
                style={{
                  backgroundColor: '#f8f9fa',
                  color: '#6c757d'
                }}
              />
              <Text size="xs" c="dimmed" mt={4}>
                ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡πâ‡∏≠‡πÅ‡∏õ‡∏•‡∏á
              </Text>
            </div>
          </Grid.Col>
        </Grid>
      </Paper>

      {/* ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° */}
      <Paper shadow="xs" p="md" radius="md">
        <Group mb="md">
          <div>
            <Title order={4} c="green">üìç ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°</Title>
            <Text size="sm" c="dimmed">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏±‡∏ö‡πÑ‡∏ü</Text>
          </div>
        </Group>

        <Grid>
          <Grid.Col span={{ base: 12 }}>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏ü‡∏î‡∏±‡∏ö
              </label>
              <FormInput
              {...register("area")}
              placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∏‡∏°‡∏ä‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡¶¨"
              error={errors.area}
            />
              <Text size="xs" c="dimmed" mt={4}>
                ‡πÄ‡∏ä‡πà‡∏ô ‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏à‡∏£‡∏¥‡∏ç‡∏™‡∏∏‡∏Ç, ‡∏ï‡∏•‡∏≤‡∏î‡∏™‡∏î‡πÄ‡∏°‡∏∑‡∏≠‡∏á, ‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ
              </Text>
            </div>
          </Grid.Col>
        </Grid>
      </Paper>

      {/* ‡πÅ‡∏™‡∏î‡∏á Time Error ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ */}
      {timeError && (
        <Alert color="red" title="‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏ß‡∏•‡∏≤">
          {timeError}
        </Alert>
      )}
    </Stack>
  );
};