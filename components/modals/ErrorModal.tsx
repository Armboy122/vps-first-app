"use client";
import React from "react";
import { Modal, Button, Alert, Stack, Text, List, Code } from "@mantine/core";
// ‡πÉ‡∏ä‡πâ emoji ‡πÅ‡∏ó‡∏ô icons ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á package ‡πÄ‡∏û‡∏¥‡πà‡∏°

interface ValidationError {
  index: number;
  error: string;
  data?: any;
}

interface ErrorModalProps {
  opened: boolean;
  onClose: () => void;
  title?: string;
  message?: string;
  type?: "error" | "warning" | "success" | "info";
  validationErrors?: ValidationError[];
  showDetails?: boolean;
}

export const ErrorModal: React.FC<ErrorModalProps> = ({
  opened,
  onClose,
  title,
  message,
  type = "error",
  validationErrors = [],
  showDetails = false,
}) => {
  const getModalConfig = () => {
    switch (type) {
      case "success":
        return {
          color: "green",
          icon: "‚úÖ",
          defaultTitle: "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
          alertColor: "green",
        };
      case "warning":
        return {
          color: "yellow",
          icon: "‚ö†Ô∏è",
          defaultTitle: "‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô",
          alertColor: "yellow",
        };
      case "info":
        return {
          color: "blue",
          icon: "‚ÑπÔ∏è",
          defaultTitle: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
          alertColor: "blue",
        };
      default:
        return {
          color: "red",
          icon: "‚ùå",
          defaultTitle: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
          alertColor: "red",
        };
    }
  };

  const config = getModalConfig();

  return (
    <Modal
      opened={opened}
      onClose={onClose}
      title={
        <div style={{ display: "flex", alignItems: "center", gap: "8px" }}>
          <span style={{ fontSize: "20px" }}>{config.icon}</span>
          <Text fw={600} size="lg">
            {title || config.defaultTitle}
          </Text>
        </div>
      }
      size="md"
      centered
      styles={{
        title: {
          color: config.color === "red" ? "#fa5252" : 
                 config.color === "green" ? "#51cf66" :
                 config.color === "yellow" ? "#ffd43b" : "#339af0"
        }
      }}
    >
      <Stack gap="md">
        {/* ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏Å */}
        {message && (
          <Alert
            color={config.alertColor}
            icon={<span>{config.icon}</span>}
            variant="light"
          >
            <Text size="sm">{message}</Text>
          </Alert>
        )}

        {/* ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ validation errors */}
        {validationErrors.length > 0 && (
          <div>
            <Text fw={500} size="sm" mb="xs" c="red">
              üìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ({validationErrors.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£):
            </Text>
            <div style={{ 
              maxHeight: "300px", 
              overflowY: "auto", 
              border: "1px solid #e9ecef",
              borderRadius: "4px",
              padding: "8px"
            }}>
              <List spacing="sm" size="sm">
                {validationErrors.map((validationError, index) => (
                  <List.Item key={index} style={{ 
                    padding: "8px",
                    backgroundColor: "#fff5f5",
                    borderRadius: "4px",
                    border: "1px solid #fed7d7"
                  }}>
                    <div>
                      <Text span fw={600} c="red">
                        üî¥ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà {validationError.index}:
                      </Text>
                      <Text span size="sm" ml="xs">
                        {validationError.error}
                      </Text>
                    </div>
                    
                    {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î */}
                    {validationError.data && (
                      <div style={{ marginTop: "4px" }}>
                        <Text size="xs" c="gray.6" fw={500}>
                          üí° ‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:
                        </Text>
                        {validationError.error.includes("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏°‡πâ‡∏≠‡πÅ‡∏õ‡∏•‡∏á") ? (
                          <Text size="xs" c="blue">
                            ‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡∏°‡πâ‡∏≠‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á<br/>
                            ‚Ä¢ ‡πÉ‡∏ä‡πâ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á<br/>
                            ‚Ä¢ ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏≤‡∏Å‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                          </Text>
                        ) : validationError.error.includes("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà") ? (
                          <Text size="xs" c="blue">
                            ‚Ä¢ ‡∏ï‡∏±‡πâ‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 10 ‡∏ß‡∏±‡∏ô<br/>
                            ‚Ä¢ ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö DD/MM/YYYY ‡πÄ‡∏ä‡πà‡∏ô 25/07/2025
                          </Text>
                        ) : validationError.error.includes("‡πÄ‡∏ß‡∏•‡∏≤") ? (
                          <Text size="xs" c="blue">
                            ‚Ä¢ ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 06:00 - 20:00 ‡∏ô.<br/>
                            ‚Ä¢ ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 30 ‡∏ô‡∏≤‡∏ó‡∏µ<br/>
                            ‚Ä¢ ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö HH:MM ‡πÄ‡∏ä‡πà‡∏ô 08:00
                          </Text>
                        ) : (
                          <Text size="xs" c="blue">
                            ‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ß‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                          </Text>
                        )}
                      </div>
                    )}
                    
                    {showDetails && validationError.data && (
                      <Code block mt="xs" style={{ fontSize: "11px" }}>
                        {JSON.stringify(validationError.data, null, 2)}
                      </Code>
                    )}
                  </List.Item>
                ))}
              </List>
            </div>
            
            <Alert color="blue" icon={<span>üí°</span>} mt="md" variant="light">
              <Text size="sm" fw={500}>‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:</Text>
              <Text size="xs">
                ‚Ä¢ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô CSV ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô<br/>
                ‚Ä¢ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡∏•‡∏≠‡∏á‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á<br/>
                ‚Ä¢ ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö
              </Text>
            </Alert>
          </div>
        )}

        {/* ‡∏õ‡∏∏‡πà‡∏°‡∏õ‡∏¥‡∏î */}
        <div style={{ display: "flex", justifyContent: "flex-end", gap: "8px" }}>
          <Button
            variant="outline"
            color={config.color}
            onClick={onClose}
          >
            {type === "success" ? "‡∏ï‡∏Å‡∏•‡∏á" : "‡∏õ‡∏¥‡∏î"}
          </Button>
        </div>
      </Stack>
    </Modal>
  );
};