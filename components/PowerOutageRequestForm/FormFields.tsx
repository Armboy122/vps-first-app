"use client";
import React from "react";
import { Control, FieldErrors, UseFormRegister } from "react-hook-form";
import { PowerOutageRequestInput } from "@/lib/validations/powerOutageRequest";
import { FormField, FormInput, FormSelect, FormTimePicker } from "@/components/forms";
import dayjs from "dayjs";

interface WorkCenter {
  id: number;
  name: string;
}

interface Branch {
  id: number;
  shortName: string;
  workCenterId: number;
}

interface Transformer {
  transformerNumber: string;
  gisDetails: string;
}

interface FormFieldsProps {
  register: UseFormRegister<PowerOutageRequestInput>;
  control: Control<PowerOutageRequestInput>;
  errors: FieldErrors<PowerOutageRequestInput>;
  role: string;
  workCenters?: WorkCenter[];
  branches: Branch[];
  transformers: Transformer[];
  watchWorkCenterId: string;
  minSelectableDate: string;
  watchedOutageDate: string;
  daysFromToday: number | null;
  timeError: string | null;
  onDateChange: (event: React.ChangeEvent<HTMLInputElement>) => void;
  onTransformerSearch: (searchTerm: string) => void;
  onTransformerSelect: (transformer: Transformer) => void;
}

export const FormFields: React.FC<FormFieldsProps> = ({
  register,
  control,
  errors,
  role,
  workCenters,
  branches,
  transformers,
  watchWorkCenterId,
  minSelectableDate,
  watchedOutageDate,
  daysFromToday,
  timeError,
  onDateChange,
  onTransformerSearch,
  onTransformerSelect,
}) => {
  const workCenterOptions = workCenters?.map(wc => ({ value: wc.id, label: wc.name })) || [];
  const branchOptions = branches.map(branch => ({ value: branch.id, label: branch.shortName }));

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
      {/* ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏±‡∏ö‡πÑ‡∏ü */}
      <FormField
        label="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏±‡∏ö‡πÑ‡∏ü"
        name="outageDate"
        error={errors.outageDate}
        required
        icon="üìÖ"
      >
        <FormInput
          type="date"
          min={minSelectableDate}
          {...register("outageDate")}
          onChange={onDateChange}
          error={errors.outageDate || (timeError ? { message: timeError } as any : undefined)}
        />
        
        {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡∏¥‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà */}
        <div className="mt-1 space-y-1">
          <p className="text-xs text-gray-500">
            ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ: 
            <span className="font-medium text-green-600">
              {dayjs(minSelectableDate).format('DD/MM/YYYY')}
            </span>
          </p>
          
          {watchedOutageDate && (
            <p className={`text-xs font-medium ${
              daysFromToday !== null && daysFromToday > 10 
                ? "text-green-600" 
                : "text-red-600"
            }`}>
              {daysFromToday !== null && (
                <>
                  {daysFromToday > 10 
                    ? `‚úÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: ${dayjs(watchedOutageDate).format('DD/MM/YYYY')} (${daysFromToday} ‡∏ß‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ)`
                    : `‚ùå ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${dayjs(watchedOutageDate).format('DD/MM/YYYY')} (‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏û‡∏µ‡∏¢‡∏á ${daysFromToday} ‡∏ß‡∏±‡∏ô)`
                  }
                </>
              )}
            </p>
          )}
        </div>
      </FormField>

      {/* ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô */}
      <FormField
        label="‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô"
        name="startTime"
        error={errors.startTime}
        required
        icon="üïê"
      >
        <FormTimePicker
          name="startTime"
          control={control}
          label="‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô"
          error={errors.startTime}
        />
      </FormField>

      {/* ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î */}
      <FormField
        label="‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î"
        name="endTime"
        error={errors.endTime}
        required
        icon="üïê"
      >
        <FormTimePicker
          name="endTime"
          control={control}
          label="‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î"
          error={errors.endTime}
        />
      </FormField>

      {/* ‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏á‡∏≤‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô) */}
      {role === "ADMIN" && (
        <FormField
          label="‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏á‡∏≤‡∏ô"
          name="workCenterId"
          error={errors.workCenterId}
          required
          icon="üè¢"
        >
          <FormSelect
            {...register("workCenterId")}
            options={workCenterOptions}
            placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏á‡∏≤‡∏ô"
            error={errors.workCenterId}
          />
        </FormField>
      )}

      {/* ‡∏™‡∏≤‡∏Ç‡∏≤ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô) */}
      {role === "ADMIN" && (
        <FormField
          label="‡∏™‡∏≤‡∏Ç‡∏≤"
          name="branchId"
          error={errors.branchId}
          required
          icon="üè™"
        >
          <FormSelect
            {...register("branchId")}
            options={branchOptions}
            placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤"
            error={errors.branchId}
            disabled={!watchWorkCenterId}
          />
        </FormField>
      )}

      {/* ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡∏°‡πâ‡∏≠‡πÅ‡∏õ‡∏•‡∏á */}
      <FormField
        label="‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡∏°‡πâ‡∏≠‡πÅ‡∏õ‡∏•‡∏á"
        name="transformerNumber"
        error={errors.transformerNumber}
        required
        icon="‚ö°"
      >
        <FormInput
          {...register("transformerNumber", {
            onChange: (e) => onTransformerSearch(e.target.value),
          })}
          placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡∏°‡πâ‡∏≠‡πÅ‡∏õ‡∏•‡∏á"
          error={errors.transformerNumber}
        />
        
        {/* ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏°‡πâ‡∏≠‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏î‡πâ */}
        {transformers.length > 0 && (
          <ul className="mt-2 border border-gray-200 rounded-md shadow-sm">
            {transformers.map((transformer) => (
              <li
                key={transformer.transformerNumber}
                className="px-4 py-2 hover:bg-gray-50 cursor-pointer"
                onClick={() => onTransformerSelect(transformer)}
              >
                {transformer.transformerNumber} - {transformer.gisDetails}
              </li>
            ))}
          </ul>
        )}
      </FormField>

      {/* ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á (GIS) */}
      <FormField
        label="‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á (GIS)"
        name="gisDetails"
        icon="üìç"
      >
        <FormInput
          {...register("gisDetails")}
          readOnly
          className="bg-gray-50"
        />
      </FormField>

      {/* ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏ü‡∏î‡∏±‡∏ö */}
      <FormField
        label="‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏ü‡∏î‡∏±‡∏ö"
        name="area"
        error={errors.area}
        icon="üåç"
      >
        <FormInput
          {...register("area")}
          placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏ü‡∏î‡∏±‡∏ö"
          error={errors.area}
        />
      </FormField>
    </div>
  );
};
